<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nemiro.Data</name>
    </assembly>
    <members>
        <member name="T:Nemiro.Data.TableAttribute">
            <summary>
            Indicates that the class implements database table.
            </summary>
            <remarks>
            <para>This attribute marks the class inherited from <see cref="T:Nemiro.Data.Sql.BaseObject"/>.</para>
            </remarks>
        </member>
        <member name="M:Nemiro.Data.TableAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.TableAttribute"/> class with specified a table name.
            </summary>
            <param name="tableName">Name of the table, which is implemented in the class.</param>
        </member>
        <member name="M:Nemiro.Data.TableAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.TableAttribute"/> class.
            </summary>
            <param name="tableName">Name of the table, which is implemented in the class.</param>
            <param name="connectionString">Connection string to the database, or the name of parameter in the application configuration file, containing connection string.</param>
        </member>
        <member name="P:Nemiro.Data.TableAttribute.TableName">
            <summary>
            Name of the table, which is implemented in the class.
            </summary>
        </member>
        <member name="P:Nemiro.Data.TableAttribute.ConnectionString">
            <summary>
            Connection string (optional).
            </summary>
        </member>
        <member name="T:Nemiro.Data.Sql.SqlClient">
            <summary>
            SQL Server client class.
            </summary>
            <remarks>
            <para>By default, the class initialization parameters are used in the configuration file.
            For web-projects - <c>web.config</c>; for applications Windows - <c>app.config</c>.</para>
            <para>Following parameters are supported:
            <list type="bullet">
            <item><description>NeData:Sql:ConnectionMode</description></item>
            <item><description>NeData:Sql:CommandType</description></item>
            <item><description>NeData:Sql:CacheType</description></item>
            <item><description>NeData:Sql:CacheDuration (not recommended)</description></item>
            <item><description>NeData:Sql:CachePath</description></item>
            <item><description>NeData:Sql:CacheBinder</description></item>
            <item><description>NeData:Sql:CacheBufferSize</description></item>
            <item><description>NeData:Sql:CacheBufferAccessTimeout (for example: 0.00:00:00.500 - 500 ms)</description></item>
            <item><description>NeData:Sql:CacheAccessTimeout (for example: 0.00:00:00.500 - 500 ms)</description></item>
            <item><description>NeData:Sql:CacheCustom</description></item>
            <item><description>NeData:Sql:CacheCustomArgs</description></item>
            </list>
            </para>
            <para>For Windows applications, the parameter names should be recorded without the colons (case sensitive).
            For example: 
            <list type="bullet">
            <item><description>NeDataSqlCacheTyp</description></item>
            <item><description>NeDataSqlAutoTrimmingStrings</description></item>
            <item><description>NeDataSqlCachePath</description></item>
            <item><description>etc.</description></item>
            </list>
            </para>
            <para>
            The default connection string is <c>LocalSqlServer</c>.
            To use the <c>LocalSqlServer</c> in web applications with your database, you need remove default connection string and add your connection string value:
            </para>
            <code lang="XML">
            &lt;remove name="LocalSqlServer"/&gt;
            &lt;add 
              name="LocalSqlServer" 
              connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=example;Trusted_Connection=True;" 
            /&gt;
            </code>
            </remarks>
            <example>
            <para>The following example creates an instance of the <see cref="T:Nemiro.Data.Sql.SqlClient"/> class using connection string by default (<c>LocalSqlServer</c>).</para>
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              DataRow row = client.GetRow("SELECT * FROM table WHERE id = 1000");
              if(row == null)
              {
                Console.WriteLine("No results...");
              }
              else
              {
                Console.WriteLine("id = {0}", row["id"]);
              }
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient()
              Dim row As DataRow = client.GetRow("SELECT * FROM table WHERE id = 1000")
              If row Is Nothing Then
                Console.WriteLine("No results...")
              Else
                Console.WriteLine("id = {0}", row("id"))
              End If
            End Using
            </code>
            <para>The following example creates an instance of the <see cref="T:Nemiro.Data.Sql.SqlClient"/> class with an explicit connection string.</para>
            <code lang="C#">
            using (SqlClient client = new SqlClient(@"Data Source=.\SQLEXPRESS;Initial Catalog=example;Trusted_Connection=True;"))
            {
              DataRow row = client.GetRow("SELECT * FROM table WHERE id = 1000");
              if(row == null)
              {
                Console.WriteLine("No results...");
              }
              else
              {
                Console.WriteLine("id = {0}", row["id"]);
              }
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient("Data Source=.\SQLEXPRESS;Initial Catalog=example;Trusted_Connection=True;")
              Dim row As DataRow = client.GetRow("SELECT * FROM table WHERE id = 1000")
              If row Is Nothing Then
                Console.WriteLine("No results...")
              Else
                Console.WriteLine("id = {0}", row("id"))
              End If
            End Using
            </code>
            <para>The following example creates an instance of the <see cref="T:Nemiro.Data.Sql.SqlClient"/> class with the parameter name in the configuration file, containing the connection string.</para>
            <code lang="C#">
            using (SqlClient client = new SqlClient("MyConnectionString"))
            {
              DataRow row = client.GetRow("SELECT * FROM table WHERE id = 1000");
              if(row == null)
              {
                Console.WriteLine("No results...");
              }
              else
              {
                Console.WriteLine("id = {0}", row["id"]);
              }
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient("MyConnectionString")
              Dim row As DataRow = client.GetRow("SELECT * FROM table WHERE id = 1000")
              If row Is Nothing Then
                Console.WriteLine("No results...")
              Else
                Console.WriteLine("id = {0}", row("id"))
              End If
            End Using
            </code>
            <para>The following example demonstrates the use of the built-in caching mechanism.</para>
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              // cache the query results via file cache for 30 sec.
              client.CacheDuration = 30;
              client.CacheType = CachingType.File;
              // query building
              client.CommandText = "SELECT * FROM table";
              // query execution
              DataTable table = client.GetTable();
              // output
              Console.WriteLine("Total rows: {0}", table.Rows.Count);
              Console.WriteLine("Query execution time: {0}", client.LastQueryTime);
              Console.WriteLine("From cache: {0}", client.LastQueryResultsFromCache);
              // repeated execution of the same query
              table = client.GetTable();
              Console.WriteLine("Total rows: {0}", table.Rows.Count);
              Console.WriteLine("Query execution time: {0}", client.LastQueryTime);
              Console.WriteLine("From cache: {0}", client.LastQueryResultsFromCache);
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient()
              ' cache the query results via file cache for 30 sec.
              client.CacheDuration = 30
              client.CacheType = CachingType.File
              ' query building
              client.CommandText = "SELECT * FROM test"
              ' query execution
              Dim table As DataTable = client.GetTable()
              ' output
              Console.WriteLine("Total rows: {0}", table.Rows.Count)
              Console.WriteLine("Query execution time: {0}", client.LastQueryTime)
              Console.WriteLine("From cache: {0}", client.LastQueryResultsFromCache)
              ' repeated execution of the same query
              table = client.GetTable()
              Console.WriteLine("Total rows: {0}", table.Rows.Count)
              Console.WriteLine("Query execution time: {0}", client.LastQueryTime)
              Console.WriteLine("From cache: {0}", client.LastQueryResultsFromCache)
            End Using
            </code>
            </example>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Sql.SqlClient"/> class.
            </summary>
            <example>
            <para>The following example creates an instance of the <see cref="T:Nemiro.Data.Sql.SqlClient"/> class with default settings.</para>
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              // ...
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient()
              '...
            End Using
            </code>
            </example>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Sql.SqlClient"/> class.
            </summary>
            <param name="connectionString">Connection string.
            For example: <c>user id=;password=;data source=(local);initial catalog=</c>
            Default value: <c>LocalSqlServer</c> (key name of the connection string in the.config file)
            </param>
            <example>
            <para>The following example creates an instance of the <see cref="T:Nemiro.Data.Sql.SqlClient"/> class with the parameter name in the configuration file that contains the connection string to the SQL Server.</para>
            <code lang="C#">
            using (SqlClient client = new SqlClient("MyConnectionString"))
            {
              // ...
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient("MyConnectionString")
              '...
            End Using
            </code>
            <para>Here's the file <c>web.config</c>:</para>
            <code lang="XML">
            &lt;configuration&gt;
              &lt;connectionStrings&gt;
                &lt;add 
                  name="LocalSqlServer" 
                  connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=example;Trusted_Connection=True;" 
                /&gt;
              &lt;/connectionStrings&gt;
            &lt;/configuration&gt;
            </code>
            </example>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Sql.SqlClient"/> class.
            </summary>
            <param name="connectionString">Connection string.
            For example: <c>user id=;password=;data source=(local);initial catalog=</c>
            Default value: <c>LocalSqlServer</c> (key name of the connection string in the.config file)
            </param>
            <param name="cacheDuration">Duration caching the query results (in seconds). Minus one - without caching. Zero - use the value of the configuration file parameter <c>NeData:Sql:CacheDuration</c>.</param>
            <example>
            <para>The following example creates an instance of the <see cref="T:Nemiro.Data.Sql.SqlClient"/> class with specifying the connection string and duration caching the query results.</para>
            <code lang="C#">
            using (SqlClient client = new SqlClient(@"Data Source=.\SQLEXPRESS;Initial Catalog=example;Trusted_Connection=True;", 300))
            {
              // ...
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient("Data Source=.\SQLEXPRESS;Initial Catalog=example;Trusted_Connection=True;", 300)
              '...
            End Using
            </code>
            </example>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Sql.SqlClient"/> class.
            </summary>
            <param name="connectionString">Connection string.
            For example: <c>user id=;password=;data source=(local);initial catalog=</c>
            Default value: <c>LocalSqlServer</c> (key name of the connection string in the.config file)
            </param>
            <param name="cachePath">The path of storage a cache files. Using only with <see cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/> = <see cref="F:Nemiro.Data.CachingType.File"/>.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.#ctor(System.String,System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Sql.SqlClient"/> class.
            </summary>
            <param name="connectionString">Connection string.
            For example: <c>user id=;password=;data source=(local);initial catalog=</c>
            Default value: <c>LocalSqlServer</c> (key name of the connection string in the.config file)
            </param>
            <param name="cacheCustom">Type of custom cache (must inherit from the <see cref="T:System.Runtime.Caching.ObjectCache"/> class). The default value is taken from the <c>NeData:Sql:CacheCustom</c> configuration file.</param>
            <param name="cacheCustomArgs">Additional parameters for initialization a custom cache. The default value is taken from the <c>NeData:Sql:CacheCustomArgs</c> configuration file.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Sql.SqlClient"/> with custom cache object.
            </summary>
            <param name="cacheCustom">Type of custom cache (must inherit from the <see cref="T:System.Runtime.Caching.ObjectCache"/> class). The default value is taken from the <c>NeData:Sql:CacheCustom</c> configuration file.</param>
            <param name="cacheCustomArgs">Additional parameters for initialization a custom cache. The default value is taken from the <c>NeData:Sql:CacheCustomArgs</c> configuration file.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.#ctor(System.Type,System.Object[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Sql.SqlClient"/> class.
            </summary>
            <param name="cacheCustom">Type of custom cache (must inherit from the <see cref="T:System.Runtime.Caching.ObjectCache"/> class). The default value is taken from the <c>NeData:Sql:CacheCustom</c> configuration file.</param>
            <param name="cacheCustomArgs">Additional parameters for initialization a custom cache. The default value is taken from the <c>NeData:Sql:CacheCustomArgs</c> configuration file.</param>
            <param name="cacheDuration">Duration caching the query results (in seconds). Minus one - without caching. Zero - use the value of the configuration file parameter <c>NeData:Sql:CacheDuration</c>.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.#ctor(System.Type,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Sql.SqlClient"/> class with custom cache object and caching duration.
            </summary>
            <param name="cacheCustom">Type of custom cache (must inherit from the <see cref="T:System.Runtime.Caching.ObjectCache"/> class). The default value is taken from the <c>NeData:Sql:CacheCustom</c> configuration file.</param>
            <param name="cacheDuration">Duration caching the query results (in seconds). Minus one - without caching. Zero - use the value of the configuration file parameter <c>NeData:Sql:CacheDuration</c>.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Sql.SqlClient"/> class with caching duration.
            </summary>
            <param name="cacheDuration">Duration caching the query results (in seconds). Minus one - without caching. Zero - use the value of the configuration file parameter <c>NeData:Sql:CacheDuration</c>.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.#ctor(System.String,System.Int32,System.String,System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Sql.SqlClient"/> class.
            </summary>
            <param name="connectionString">Connection string.
            For example: <c>user id=;password=;data source=(local);initial catalog=</c>
            Default value: <c>LocalSqlServer</c> (key name of the connection string in the.config file)
            </param>
            <param name="cacheDuration">Duration caching the query results (in seconds). Minus one - without caching. Zero - use the value of the configuration file parameter <c>NeData:Sql:CacheDuration</c>.</param>
            <param name="cachePath">The path of storage a cache files. Using only with <see cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/> = <see cref="F:Nemiro.Data.CachingType.File"/>.</param>
            <param name="cacheCustom">Type of custom cache (must inherit from the <see cref="T:System.Runtime.Caching.ObjectCache"/> class). The default value is taken from the <c>NeData:Sql:CacheCustom</c> configuration file.</param>
            <param name="cacheCustomArgs">Additional parameters for initialization a custom cache. The default value is taken from the <c>NeData:Sql:CacheCustomArgs</c> configuration file.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.#ctor(System.String,System.Int32,System.String,System.Type,System.Object[],System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Sql.SqlClient"/> class.
            </summary>
            <param name="connectionString">Connection string.
            For example: <c>user id=;password=;data source=(local);initial catalog=</c>
            Default value: <c>LocalSqlServer</c> (key name of the connection string in the.config file)
            </param>
            <param name="cacheDuration">Duration caching the query results (in seconds). Minus one - without caching. Zero - use the value of the configuration file parameter <c>NeData:Sql:CacheDuration</c>.</param>
            <param name="cachePath">The path of storage a cache files. Using only with <see cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/> = <see cref="F:Nemiro.Data.CachingType.File"/>.</param>
            <param name="cacheCustom">Type of custom cache (must inherit from the <see cref="T:System.Runtime.Caching.ObjectCache"/> class). The default value is taken from the <c>NeData:Sql:CacheCustom</c> configuration file.</param>
            <param name="cacheCustomArgs">Additional parameters for initialization a custom cache. The default value is taken from the <c>NeData:Sql:CacheCustomArgs</c> configuration file.</param>
            <param name="cacheBinder">Type serializer of custom objects. Only for <see cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/> = <see cref="F:Nemiro.Data.CachingType.File"/>.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.Dispose">
            <summary>
            Releases all resources used by the object.
            If necessary, closing all opened connections to the database.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.GetData">
            <summary>
            Executes the query and returns <see cref="T:System.Data.DataSet"/>.
            This method is used in conjunction with the properties <see cref="P:Nemiro.Data.Sql.SqlClient.CommandType"/>, <see cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/> and <see cref="P:Nemiro.Data.Sql.SqlClient.Parameters"/>.
            </summary>
            <!--returns>
            <para>Если запрос успешно выполнен, возвращает <see cref="T:System.Data.DataSet"/>, содержащий результат выполнения запроса.</para>
            <para>Если запрос не дал результатов, возвращает пустой <see cref="T:System.Data.DataSet"/>.</para>
            </returns-->
            <example>
            <code lang="C#">
            using (SqlClient c = new SqlClient())
            {
              c.CommandText = "SELECT * FROM messages; SELECT * FROM users;";
              DataSet data = c.GetData();
              if(data.Tables.Count &gt; 0)
              {
                foreach(DataTable t in data.Tables)
                {
                  foreach(DataRow r in table.Rows)
                  {
                    Console.WriteLine("id = {0}", r["id"]);
                  }
                }
              }
            }
            </code>
            <code lang="VB">
            Using c As new SqlClient()
              c.CommandText = "SELECT * FROM messages; SELECT * FROM users;"
              Dim data As DataSet = c.GetData()
              If data.Tables.Count &gt; 0 Then
                For Each t As DataTable In data.Tables
                  For Each r As DataRow In table.Rows
                    Console.WriteLine("id = {0}", r("id"))
                  Next
                Next
              End If
            End Using
            </code>
            </example>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetTable"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetRow"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteScalar"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteNonQuery"/>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.GetData(System.String)">
            <summary>
            Executes the specified SQL-statement and returns <see cref="T:System.Data.DataSet"/>.
            </summary>
            <!--returns>
            <para>Если запрос успешно выполнен, возвращает <see cref="T:System.Data.DataSet"/>, содержащий результат выполнения запроса.</para>
            <para>Если запрос не дал результатов, возвращает пустой <see cref="T:System.Data.DataSet"/>.</para>
            </returns-->
            <example>
            <code lang="C#">
            using (SqlClient c = new SqlClient())
            {
              DataSet data = c.GetData("SELECT * FROM messages; SELECT * FROM users;");
              if(data.Tables.Count &gt; 0)
              {
                foreach(DataTable t in data.Tables)
                {
                  foreach(DataRow r in table.Rows)
                  {
                    Console.WriteLine("id = {0}", r["id"]);
                  }
                }
              }
            }
            </code>
            <code lang="VB">
            Using c As new SqlClient()
              Dim data As DataSet = c.GetData("SELECT * FROM messages; SELECT * FROM users;")
              If data.Tables.Count &gt; 0 Then
                For Each t As DataTable In data.Tables
                  For Each r As DataRow In table.Rows
                    Console.WriteLine("id = {0}", r("id"))
                  Next
                Next
              End If
            End Using
            </code>
            </example>
            <param name="sql">Query SQL, to be executed.</param>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetTable"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetRow"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteScalar"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteNonQuery"/>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.GetData(System.Data.SqlClient.SqlCommand)">
            <summary>
			Executes the specified <see cref="T:System.Data.SqlClient.SqlCommand"/> and returns <see cref="T:System.Data.DataSet"/>.
            </summary>
            <!--returns>
            <para>Если запрос успешно выполнен, возвращает <see cref="T:System.Data.DataSet"/>, содержащий результат выполнения запроса.</para>
            <para>Если запрос не дал результатов, возвращает пустой <see cref="T:System.Data.DataSet"/>.</para>
            </returns>
            <remarks>
            <para>
            В большинстве случаев, рекомендуется использовать метод <see cref="M:Nemiro.Data.Sql.SqlClient.GetData"/> без параметров, совместно со свойствами 
            <see cref="P:Nemiro.Data.Sql.SqlClient.CommandType"/>, <see cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/> и <see cref="P:Nemiro.Data.Sql.SqlClient.Parameters"/>.
            Суть будет примерно такой же, как и с <see cref="T:System.Data.SqlClient.SqlCommand"/>, но работать удобней.
            </para>
            </remarks-->
            <example>
            <code lang="C#">
            using (SqlClient c = new SqlClient())
            {
              SqlCommand cmd = new SqlCommand("SELECT * FROM messages; SELECT * FROM users;");
              DataSet data = c.GetData(cmd);
              if(data.Tables.Count &gt; 0)
              {
                foreach(DataTable t in data.Tables)
                {
                  foreach(DataRow r in table.Rows)
                  {
                    Console.WriteLine("id = {0}", r["id"]);
                  }
                }
              }
            }
            </code>
            <code lang="VB">
            Using c As new SqlClient()
              Dim cmd As New SqlCommand("SELECT * FROM messages; SELECT * FROM users")
              Dim data As DataSet = c.GetData(cmd)
              If data.Tables.Count &gt; 0 Then
                For Each t As DataTable In data.Tables
                  For Each r As DataRow In table.Rows
                    Console.WriteLine("id = {0}", row("id"))
                  Next
                Next
              End If
            End Using
            </code>
            </example>
            <param name="cmd">Instance <see cref="T:System.Data.SqlClient.SqlCommand"/>, containing the query and the query parameters.</param>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetTable"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetRow"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteScalar"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteNonQuery"/>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.GetTable">
            <summary>
            Executes the query and returns <see cref="T:System.Data.DataTable"/>.
            This method is used in conjunction with the properties <see cref="P:Nemiro.Data.Sql.SqlClient.CommandType"/>, <see cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/> and <see cref="P:Nemiro.Data.Sql.SqlClient.Parameters"/>.
            </summary>
            <!--returns>
            <para>Если запрос успешно выполнен, возвращает таблицу, содержащую результат выполнения запроса.</para>
            <para>Если запрос не дал результатов, возвращает пустую таблицу.</para>
            </returns-->
            <example>
            <code lang="C#">
            using (SqlClient c = new SqlClient())
            {
              c.CommandText = "SELECT * FROM users;";
              DataTable table = c.GetTable();
              foreach(DataRow row in table.Rows)
              {
                Console.WriteLine("login = {0}", row["login"]);
              }
            }
            </code>
            <code lang="VB">
            Using c As new SqlClient()
              c.CommandText = "SELECT * FROM users;"
              Dim table As DataTable = c.GetTable()
              For Each row As DataRow In table.Rows
                Console.WriteLine("login = {0}", row("login"))
              Next
            End Using
            </code>
            </example>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetData"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetRow"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteScalar"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteNonQuery"/>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.GetTable(System.String)">
            <summary>
            Executes the query and returns <see cref="T:System.Data.DataTable"/>.
            </summary>
            <!--returns>
            <para>Если запрос успешно выполнен, возвращает таблицу, содержащую результат выполнения запроса.</para>
            <para>Если запрос не дал результатов, возвращает пустую таблицу.</para>
            </returns-->
            <param name="sql">Query SQL, to be executed.</param>
            <example>
            <code lang="C#">
            using (SqlClient c = new SqlClient())
            {
              DataTable table = c.GetTable("SELECT * FROM users;");
              foreach(DataRow row in table.Rows)
              {
                Console.WriteLine("login = {0}", row["login"]);
              }
            }
            </code>
            <code lang="VB">
            Using c As new SqlClient()
              Dim table As DataTable = c.GetTable("SELECT * FROM users;")
              For Each row As DataRow In table.Rows
                Console.WriteLine("login = {0}", row("login"))
              Next
            End Using
            </code>
            </example>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetData"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetRow"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteScalar"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteNonQuery"/>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.GetTable(System.Data.SqlClient.SqlCommand)">
            <summary>
            Executes the specified <see cref="T:System.Data.SqlClient.SqlCommand"/> and returns <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="cmd">Instance <see cref="T:System.Data.SqlClient.SqlCommand"/>, containing the query and the query parameters.</param>
            <!--returns>
            <para>Если запрос успешно выполнен, возвращает таблицу, содержащую результат выполнения запроса.</para>
            <para>Если запрос не дал результатов, возвращает пустую таблицу.</para>
            </returns>
            <remarks>
            <para>
            В большинстве случаев, рекомендуется использовать метод <see cref="M:Nemiro.Data.Sql.SqlClient.GetTable"/> без параметров, совместно со свойствами 
            <see cref="P:Nemiro.Data.Sql.SqlClient.CommandType"/>, <see cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/> и <see cref="P:Nemiro.Data.Sql.SqlClient.Parameters"/>.
            Суть будет примерно такой же, как и с <see cref="T:System.Data.SqlClient.SqlCommand"/>, но работать удобней.
            </para>
            </remarks-->
            <example>
            <code lang="C#">
            using (SqlClient c = new SqlClient())
            {
              SqlCommand cmd = new SqlCommand("SELECT * FROM users;");
              DataTable table = c.GetTable(cmd);
              foreach(DataRow row in table.Rows)
              {
                Console.WriteLine("login = {0}", row["login"]);
              }
            }
            </code>
            <code lang="VB">
            Using c As new SqlClient()
              Dim cmd As New SqlCommand("SELECT * FROM users;")
              Dim table As DataTable = c.GetTable(cmd)
              For Each row As DataRow In table.Rows
                Console.WriteLine("login = {0}", row("login"))
              Next
            End Using
            </code>
            </example>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetData"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetRow"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteScalar"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteNonQuery"/>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.GetRow">
            <summary>
            Executes the query and returns data row.
            This method is used in conjunction with the properties <see cref="P:Nemiro.Data.Sql.SqlClient.CommandType"/>, <see cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/> and <see cref="P:Nemiro.Data.Sql.SqlClient.Parameters"/>.
            </summary>
            <!--returns>
            <para>Если запрос успешно выполнен, возвращает строку, содержащую результат выполнения запроса.</para>
            <para>Если запрос не дал результатов, возвращает <c>NULL</c> (в Visual Basic .NET - <c>Nothing</c>).</para>
            </returns-->
            <example>
            <code lang="C#">
            using (SqlClient c = new SqlClient())
            {
              c.CommandText = "SELECT * FROM users WHERE login = 'anylogin';";
              DataRow row = c.GetRow();
              if(row != null)
              {
                Console.WriteLine("nickname = {0}", row["nickname"]);
              }
            }
            </code>
            <code lang="VB">
            Using c As new SqlClient()
              c.CommandText = "SELECT * FROM users WHERE login = 'anylogin';"
              Dim row As DataRow = c.GetRow()
               If row IsNot Nothing Then
                Console.WriteLine("nickname = {0}", row("nickname"))
              End If
            End Using
            </code>
            </example>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetData"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetTable"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteScalar"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteNonQuery"/>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.GetRow(System.String)">
            <summary>
            Executes the query and returns data row.
            </summary>
            <!--returns>
            <para>Если запрос успешно выполнен, возвращает строку, содержащую результат выполнения запроса.</para>
            <para>Если запрос не дал результатов, возвращает <c>NULL</c> (в Visual Basic .NET - <c>Nothing</c>).</para>
            </returns-->
            <example>
            <code lang="C#">
            using (SqlClient c = new SqlClient())
            {
              DataRow row = c.GetRow("SELECT * FROM users WHERE login = 'anylogin';");
              if(row != null)
              {
                Console.WriteLine("nickname = {0}", row["nickname"]);
              }
            }
            </code>
            <code lang="VB">
            Using c As new SqlClient()
              Dim row As DataRow = c.GetRow("SELECT * FROM users WHERE login = 'anylogin';")
              If row IsNot Nothing Then
                Console.WriteLine("nickname = {0}", row("nickname"))
              End If
            End Using
            </code>
            </example>
            <param name="sql">Query SQL, to be executed.</param>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetData"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetTable"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteScalar"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteNonQuery"/>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.GetRow(System.Data.SqlClient.SqlCommand)">
            <summary>
            Executes the specified <see cref="T:System.Data.SqlClient.SqlCommand"/> and returns строку данных.
            </summary>
            <!--returns>
            <para>Если запрос успешно выполнен, возвращает строку, содержащую результат выполнения запроса.</para>
            <para>Если запрос не дал результатов, возвращает <c>NULL</c> (в Visual Basic .NET - <c>Nothing</c>).</para>
            </returns>
            <remarks>
            <para>
            В большинстве случаев, рекомендуется использовать метод <see cref="M:Nemiro.Data.Sql.SqlClient.GetRow"/> без параметров, совместно со свойствами 
            <see cref="P:Nemiro.Data.Sql.SqlClient.CommandType"/>, <see cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/> и <see cref="P:Nemiro.Data.Sql.SqlClient.Parameters"/>.
            Суть будет примерно такой же, как и с <see cref="T:System.Data.SqlClient.SqlCommand"/>, но работать удобней.
            </para>
            </remarks-->
            <example>
            <code lang="C#">
            using (SqlClient c = new SqlClient())
            {
              SqlCommand cmd = new SqlCommand("SELECT * FROM users WHERE login = 'anylogin';");
              DataRow row = c.GetRow(cmd);
              if(row != null)
              {
                Console.WriteLine("nickname = {0}", row["nickname"]);
              }
            }
            </code>
            <code lang="VB">
              Dim cmd As New SqlCommand("SELECT * FROM users WHERE login = 'anylogin';")
              Dim row As DataRow = c.GetRow(cmd)
              If row IsNot Nothing Then
                Console.WriteLine("nickname = {0}", row("nickname"))
              End If
            End Using
            </code>
            </example>
            <param name="cmd">Instance <see cref="T:System.Data.SqlClient.SqlCommand"/>, containing the query and the query parameters.</param>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetData"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetTable"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteScalar"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteNonQuery"/>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.ExecuteNonQuery">
            <summary>
            Executes a Transact-SQL statement against the connection and returns the number of rows affected.
            This method is used in conjunction with the properties <see cref="P:Nemiro.Data.Sql.SqlClient.CommandType"/>, <see cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/> and <see cref="P:Nemiro.Data.Sql.SqlClient.Parameters"/>.
            </summary>
            <!--returns>
            <para>Возвращает число, содержащее количество задействованных строк данных в результате выполнения запроса.</para>
            <para>Если запрос не коснулся ни одной строки данных, возвращает ноль.</para>
            </returns-->
            <remarks>
            <para>Caching options are ignored.</para>
            </remarks>
            <example>
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              client.CommandText = "UPDATE messages SET hits = hits + 1 WHERE id = 42";
              int used = client.ExecuteNonQuery();
              Console.WriteLine("Updated {0} rows.", used);
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient()
              client.CommandText = "UPDATE messages SET hits = hits + 1 WHERE id = 42"
              Dim used As Integer = client.ExecuteNonQuery()
              Console.WriteLine("Updated {0} rows.", used)
            End Using
            </code>
            </example>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetData"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetTable"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetRow"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteScalar"/>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
            <exception cref="T:Nemiro.Data.ValueForIdentityException">An exception occurs if the property of primary key has not flag the Identity and field is autoincrement.</exception>
            <exception cref="T:Nemiro.Data.StringOrBinaryDataWouldBeTruncatedException">An exception occurs if some of the fields of the table are added values ​​that exceed the allowable size of a table field.</exception>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.ExecuteNonQuery(System.String)">
            <summary>
            Executes a Transact-SQL statement against the connection and returns the number of rows affected.
            </summary>
            <param name="sql">Query SQL, to be executed.</param>
            <returns>
            <para>The number of rows affected.</para>
            </returns>
            <remarks>
            <para>Caching options are ignored.</para>
            </remarks>
            <example>
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              int used = client.ExecuteNonQuery("UPDATE messages SET hits = hits + 1 WHERE id = 42");
              Console.WriteLine("Updated {0} rows.", used);
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient()
              Dim used As Integer = client.ExecuteNonQuery("UPDATE messages SET hits = hits + 1 WHERE id = 42")
              Console.WriteLine("Updated {0} rows.", used)
            End Using
            </code>
            </example>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetData"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetTable"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetRow"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteScalar"/>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
            <exception cref="T:Nemiro.Data.ValueForIdentityException">An exception occurs if the property of primary key has not flag the Identity and field is autoincrement.</exception>
            <exception cref="T:Nemiro.Data.StringOrBinaryDataWouldBeTruncatedException">An exception occurs if some of the fields of the table are added values ​​that exceed the allowable size of a table field.</exception>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.ExecuteNonQuery(System.Data.SqlClient.SqlCommand)">
            <summary>
            Executes the specified <see cref="T:System.Data.SqlClient.SqlCommand"/> and returns the number of rows affected.
            </summary>
            <returns>
            <para>The number of rows affected.</para>
            </returns>
            <remarks>
            <!--para>
            В большинстве случаев, рекомендуется использовать метод <see cref="M:Nemiro.Data.Sql.SqlClient.ExecuteNonQuery"/> без параметров, совместно со свойствами 
            <see cref="P:Nemiro.Data.Sql.SqlClient.CommandType"/>, <see cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/> и <see cref="P:Nemiro.Data.Sql.SqlClient.Parameters"/>.
            Суть будет примерно такой же, как и с <see cref="T:System.Data.SqlClient.SqlCommand"/>, но работать удобней.
            </para-->
            <para>Caching options are ignored.</para>
            </remarks>
            <example>
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              SqlCommand cmd = new SqlCommand("UPDATE messages SET hits = hits + 1 WHERE id = @id");
              cmd.Parameters.Add("@id", SqlDbType.Int).Value = 42;
              int used = client.ExecuteNonQuery(cmd);
              Console.WriteLine("Updated {0} rows.", used);
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient()
              Dim cmd As New SqlCommand("UPDATE messages SET hits = hits + 1 WHERE id = @id")
              cmd.Parameters.Add("@id", SqlDbType.Int).Value = 42
              Dim used As Integer = client.ExecuteNonQuery(cmd)
              Console.WriteLine("Updated {0} rows.", used)
            End Using
            </code>
            </example>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetData"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetTable"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetRow"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteScalar"/>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
            <exception cref="T:Nemiro.Data.ValueForIdentityException">An exception occurs if the property of primary key has not flag the Identity and field is autoincrement.</exception>
            <exception cref="T:Nemiro.Data.StringOrBinaryDataWouldBeTruncatedException">An exception occurs if some of the fields of the table are added values ​​that exceed the allowable size of a table field.</exception>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.ExecuteScalar">
            <summary>
            Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
            This method is used in conjunction with the properties <see cref="P:Nemiro.Data.Sql.SqlClient.CommandType"/>, <see cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/> and <see cref="P:Nemiro.Data.Sql.SqlClient.Parameters"/>.
            </summary>
            <returns>
            <para>The first column of the first row in the result set, or a null reference (Nothing in Visual Basic) if the result set is empty. Returns a maximum of 2033 characters.</para>
            <!--para>Может вернуть <see cref="F:System.DBNull.Value"/>, если запрос был успешно выполнен и полученное поле имеет значение <c>NULL</c>.</para-->
            </returns>
            <!--remarks>
            <para>
            Результат выполнения запроса может кэшироваться, если свойство <see cref="P:Nemiro.Data.Sql.SqlClient.CacheDuration"/> 
            больше нуля и <see cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/> имеет отличное от <see cref="F:Nemiro.Data.CachingType.None"/> значение.
            </para>
            </remarks-->
            <example>
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              client.CommandText = "SELECT nickname FROM users WHERE id_users = @id_users";
              client.Parameters.Add("@id_users", SqlDbType.Int).Value = 1024;
              Console.WriteLine("User nickname: {0}", client.ExecuteScalar());
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient()
              client.CommandText = "SELECT nickname FROM users WHERE id_users = @id_users"
              client.Parameters.Add("@id_users", SqlDbType.Int).Value = 1024
              Console.WriteLine("User nickname: {0}", client.ExecuteScalar())
            End Using
            </code>
            </example>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetData"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetTable"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetRow"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteNonQuery"/>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
            <exception cref="T:Nemiro.Data.ValueForIdentityException">An exception occurs if the property of primary key has not flag the Identity and field is autoincrement.</exception>
            <exception cref="T:Nemiro.Data.StringOrBinaryDataWouldBeTruncatedException">An exception occurs if some of the fields of the table are added values ​​that exceed the allowable size of a table field.</exception>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.ExecuteScalar(System.String)">
            <summary>
            Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
            </summary>
            <returns>
            <para>The first column of the first row in the result set, or a null reference (Nothing in Visual Basic) if the result set is empty. Returns a maximum of 2033 characters.</para>
            <!--para>Может вернуть <see cref="F:System.DBNull.Value"/>, если запрос был успешно выполнен и полученное поле имеет значение <c>NULL</c>.</para-->
            </returns>
            <!--remarks>
            <para>
            Результат выполнения запроса может кэшироваться, если свойство <see cref="P:Nemiro.Data.Sql.SqlClient.CacheDuration"/> 
            больше нуля и <see cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/> имеет отличное от <see cref="F:Nemiro.Data.CachingType.None"/> значение.
            </para>
            </remarks-->
            <example>
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              object result = client.ExecuteScalar("SELECT nickname FROM users WHERE id_users = 1");
              Console.WriteLine("User nickname: {0}", result);
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient()
              Dim result As Object 
              result = client.ExecuteScalar("SELECT nickname FROM users WHERE id_users = 1")
              Console.WriteLine("User nickname: {0}", result)
            End Using
            </code>
            </example>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetData"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetTable"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetRow"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteNonQuery"/>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
            <exception cref="T:Nemiro.Data.ValueForIdentityException">An exception occurs if the property of primary key has not flag the Identity and field is autoincrement.</exception>
            <exception cref="T:Nemiro.Data.StringOrBinaryDataWouldBeTruncatedException">An exception occurs if some of the fields of the table are added values ​​that exceed the allowable size of a table field.</exception>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.ExecuteScalar(System.Data.SqlClient.SqlCommand)">
            <summary>
            Executes the specified <see cref="T:System.Data.SqlClient.SqlCommand"/>, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
            </summary>
            <returns>
            <para>The first column of the first row in the result set, or a null reference (Nothing in Visual Basic) if the result set is empty. Returns a maximum of 2033 characters.</para>
            <!--para>Может вернуть <see cref="F:System.DBNull.Value"/>, если запрос был успешно выполнен и полученное поле имеет значение <c>NULL</c>.</para-->
            </returns>
            <!--remarks>
            <para>
            В большинстве случаев, рекомендуется использовать метод <see cref="M:Nemiro.Data.Sql.SqlClient.ExecuteScalar"/> без параметров, совместно со свойствами 
            <see cref="P:Nemiro.Data.Sql.SqlClient.CommandType"/>, <see cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/> и <see cref="P:Nemiro.Data.Sql.SqlClient.Parameters"/>.
            Суть будет примерно такой же, как и с <see cref="T:System.Data.SqlClient.SqlCommand"/>, но работать удобней.
            </para>
            <para>
            Результат выполнения запроса может кэшироваться, если свойство <see cref="P:Nemiro.Data.Sql.SqlClient.CacheDuration"/> 
            больше нуля и <see cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/> имеет отличное от <see cref="F:Nemiro.Data.CachingType.None"/> значение.
            </para>
            </remarks-->
            <example>
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              SqlCommand cmd = new SqlCommand("SELECT nickname FROM users WHERE id_users = @id_users");
              cmd.Parameters.Add("@id_users", SqlDbType.Int).Value = 1024;
              Console.WriteLine("User nickname: {0}", client.ExecuteScalar(cmd));
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient()
              Dim cmd As New SqlCommand("SELECT nickname FROM users WHERE id_users = @id_users")
              cmd.Parameters.Add("@id_users", SqlDbType.Int).Value = 1024
              Console.WriteLine("User nickname: {0}", client.ExecuteScalar(cmd))
            End Using
            </code>
            </example>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetData"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetTable"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.GetRow"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.ExecuteNonQuery"/>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
            <exception cref="T:Nemiro.Data.ValueForIdentityException">An exception occurs if the property of primary key has not flag the Identity and field is autoincrement.</exception>
            <exception cref="T:Nemiro.Data.StringOrBinaryDataWouldBeTruncatedException">An exception occurs if some of the fields of the table are added values ​​that exceed the allowable size of a table field.</exception>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.CopyTableToServer(System.Data.DataTable)">
            <summary>
            Transferring the specified table to the database.
            Used <see cref="T:System.Data.SqlClient.SqlBulkCopy"/>.
            The fastest and most economical way to move large amounts of data in the database.
            </summary>
            <remarks>
            <para>Target table name should be in the property <see cref="P:System.Data.DataTable.TableName"/> instance of <see cref="T:System.Data.DataTable"/>.</para>
            <para>Fields list of instance the <see cref="T:System.Data.DataTable"/> class must match to columns of the target table.</para>
            <!--para>Если коллекция строк в параметре <paramref name="value"/> пустая, то запрос к базе данных не выполняется.</para>
            <para>Используйте этот метод, если необходимо перенести большие объемы данных в базу. Метод работает быстрее и потребляет меньше ресурсов, чем использование SQL-инструкции <c>INSERT INTO</c>.</para-->
            <para>Caching options are ignored.</para>
            </remarks>
            <example>
            <!--para>В следующем примере в базу данных в таблицу <c>hotels</c> переносится список отелей.</para>
            <para>Для примера, данные формируются случайным образом.</para-->
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              // Create DataTable instance.
              // Table name is [hotels].
              // In SQL Server database should have a table named [hotels].
              DataTable table = new DataTable("hotels");
              // Add fields in the table.
              table.Columns.Add("hotel_code");
              table.Columns.Add("hotel_name");
              table.Columns.Add("hotel_stars");
              table.Columns.Add("date_created");
              // Random data generator, for example.
              Random rnd = new Random(DateTime.Now.Millisecond);
              for (int i = 0; i &lt;= 1000; i++)
              {
                table.Rows.Add(Guid.NewGuid().ToString().Substring(0, 4), Guid.NewGuid().ToString().Replace("-", ""), rnd.Next(1, 5), DateTime.Now);
              }
              // Transfer data to SQL Server
              client.CopyTableToServer(table);
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient()
              ' Create DataTable instance.
              ' Table name is [hotels].
              ' In SQL Server database should have a table named [hotels].
              Dim table As New DataTable("hotels")
              ' Add fields in the table.
              table.Columns.Add("hotel_code")
              table.Columns.Add("hotel_name")
              table.Columns.Add("hotel_stars")
              table.Columns.Add("date_created")
              ' Random data generator, for example.
              Dim rnd As New Random(DateTime.Now.Millisecond)
              For i As Integer = 0 To 1000
                table.Rows.Add(Guid.NewGuid().ToString().Substring(0, 4), Guid.NewGuid().ToString().Replace("-", ""), rnd.Next(1, 5), DateTime.Now)
              Next
              ' Transfer data to SQL Server
              client.CopyTableToServer(table)
            End Using
            </code>
            </example>
            <param name="value">Table whose you want transfer to the database.</param>
            <!--exception cref="T:System.ArgumentNullException">Если <paramref name="value"/> имеет значение <c>null</c> (<c>Nothing</c>).</exception-->
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.CopyDataToServer(System.Data.DataSet)"/>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
            <exception cref="T:Nemiro.Data.StringOrBinaryDataWouldBeTruncatedException">An exception occurs if some of the fields of the table are added values ​​that exceed the allowable size of a table field.</exception>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.CopyDataToServer(System.Data.DataSet)">
            <summary>
            Transferring the specified tables from the instance of <see cref="T:System.Data.DataSet"/> to the database.
            Used <see cref="T:System.Data.SqlClient.SqlBulkCopy"/>.
            The fastest and most economical way to move large amounts of data in the database.
            </summary>
            <remarks>
            <para>Each instance of the collection <see cref="P:System.Data.DataSet.Tables"/> must contain the name of the target table in the property <see cref="P:System.Data.DataTable.TableName"/>.</para>
            <para>Fields list of the tables must match to columns of the target tables.</para>
            <!--para>Если коллекция таблиц в параметре <paramref name="value"/> пустая, то запрос к базе данных не выполняется.</para>
            <para>Если определенная таблица не имеет в коллекции строк данных, то запрос к базе данных для этой таблицы выполняться не будет.</para>
            <para>Данные из таблиц переносятся в базу поочередно.</para>
            <para>Если в процессе переноса данных в базу возникнет ошибка, то уже перенесенные данные останутся в базе данных.</para>
            <para>Используйте этот метод, если необходимо перенести большие объемы данных в базу. Метод работает быстрее и потребляет меньше ресурсов, чем использование SQL-инструкции <c>INSERT INTO</c>.</para-->
            <para>Caching options are ignored.</para>
            </remarks>
            <example>
            <!--para>В следующем примере в базу данных в таблицы <c>hotels</c> и <c>hotels_images</c> переносятся данные отелей.</para>
            <para>Для примера, данные формируются случайным образом.</para>
            <para>Для связи фотографий отелей с отелями используются ключи типа <see cref="T:System.Guid"/>, которые создаются программно (чтобы можно было сделать связь данных).</para-->
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              // Create DataTable instance for hotels.
              // Table name is [hotels].
              // In SQL Server database should have a table named [hotels].
              DataTable hotels = new DataTable("hotels");
              // Add fields in the table.
              hotels.Columns.Add("id_hotels", typeof(Guid));
              hotels.Columns.Add("hotel_code", typeof(string));
              hotels.Columns.Add("hotel_name", typeof(string));
              hotels.Columns.Add("hotel_stars", typeof(int));
              hotels.Columns.Add("date_created", typeof(DateTime));
              
              // Create DataTable instance for photos.
              // Table name is [hotels_images].
              // In SQL Server database should have a table named [hotels_images].
              DataTable hotelsImages = new DataTable("hotels_images");
              // Add fields in the table.
              hotelsImages.Columns.Add("id_hotels", typeof(Guid)); // linked with hotels
              hotelsImages.Columns.Add("image_url", typeof(string));
              
              // Random data generator, for example.
              Random rnd = new Random(DateTime.Now.Millisecond);
              
              for (int i = 0; i &lt;= 1000; i++)
              {
				// Hotel ID.
                Guid newHotelId = Guid.NewId();
                // Hotel data.
                hotels.Rows.Add(newHotelId, Guid.NewGuid().ToString().Substring(0, 4), Guid.NewGuid().ToString().Replace("-", ""), rnd.Next(1, 5), DateTime.Now);
                // Generate photos data.
                int cnt = rnd.Next(0, 9);
                for (int j = 0; j &lt;= cnt; j++)
                {
                  // Set newHotelId to id_hotels,
                  // for linking photos with hotels.
                  hotelsImages.Rows.Add(newHotelId, String.Format("http://example.org/{0}", Guid.NewGuid()));
                }
              }
              // Create DataSet instance.
              DataSet data = new DataSet();
              // Add tables to DataSet.
              data.Tables.Add(hotels);
              data.Tables.Add(hotelsImages);
              // Transfer data to SQL Server.
              client.CopyDataToServer(data);
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient()
              ' Create DataTable instance for hotels.
              ' Table name is [hotels].
              ' In SQL Server database should have a table named [hotels].
              Dim hotels As New DataTable("hotels")
              ' Add fields in the table.
              hotels.Columns.Add("id_hotels", GetType(Guid))
              hotels.Columns.Add("hotel_code", GetType(String))
              hotels.Columns.Add("hotel_name", GetType(String))
              hotels.Columns.Add("hotel_stars", GetType(Integer))
              hotels.Columns.Add("date_created", GetType(DateTime))
              
              ' Create DataTable instance for photos.
              ' Table name is [hotels_images].
              ' In SQL Server database should have a table named [hotels_images].
              Dim hotelsImages As New DataTable("hotels_images")
              ' Add fields in the table.
              hotelsImages.Columns.Add("id_hotels", GetType(Guid)) ' поле для связи с hotels
              hotelsImages.Columns.Add("image_url", GetType(String))
              
              ' Random data generator, for example.
              Dim rnd As New Random(DateTime.Now.Millisecond)

              For i As Integer = 0 To 1000
                ' Hotel ID.
                Dim newHotelId As Guid = Guid.NewId()
                ' Hotel data.
                hotels.Rows.Add(newHotelId, Guid.NewGuid().ToString().Substring(0, 4), Guid.NewGuid().ToString().Replace("-", ""), rnd.Next(1, 5), DateTime.Now)
                ' Generate photos data.
                Dim cnt As Integer = rnd.Next(0, 9)
                For j As Integer = 0 To cnt
                  ' Set newHotelId to id_hotels,
                  ' for linking photos with hotels.
                  hotelsImages.Rows.Add(newHotelId, String.Format("http://example.org/{0}", Guid.NewGuid()))
                Next
              Next
              ' Create DataSet instance.
              Dim data As New DataSet()
              ' Add tables to DataSet.
              data.Tables.Add(hotels)
              data.Tables.Add(hotelsImages)
              ' Transfer data to SQL Server.
              client.CopyDataToServer(data)
            End Using
            </code>
            </example>
            <param name="value">Instance the <see cref="T:System.Data.DataSet"/> class, which you want to transfer to the SQL Server.</param>
            <!--exception cref="T:System.ArgumentNullException">Если <paramref name="value"/> имеет значение <c>null</c> (<c>Nothing</c>).</exception-->
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.CopyTableToServer(System.Data.DataTable)"/>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
            <exception cref="T:Nemiro.Data.StringOrBinaryDataWouldBeTruncatedException">An exception occurs if some of the fields of the table are added values ​​that exceed the allowable size of a table field.</exception>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.ValidateParameters(System.Data.SqlClient.SqlCommand@)">
            <summary>
            Checks and, if necessary, adjusts parameters of the command.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.GetCacheKey(System.String,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a cache key for the command.
            </summary>
            <param name="type">Data type: table, row etc.</param>
            <param name="cmd">Command.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.GetFromCache(System.String)">
            <summary>
            Returns data from the cache, if there.
            </summary>
            <param name="key">Cache key.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.AddToCache(System.String,System.Object)">
            <summary>
            Adds data to the cache.
            </summary>
            <param name="key">Cache key.</param>
            <param name="value">Data to be cached.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.GetCacheObject">
            <summary>
            Returns cache object.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.Connect">
            <summary>
            Opens a database connection.
            </summary>
            <!--remarks>
            <para>Нет необходимости вызывать этот метод отдельно, поскольку соединение с базой данных и так будет открываться при первой необходимости.</para>
            </remarks-->
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.Disconnect"/>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.Disconnect">
            <summary>
            Closes the database connection.
            </summary>
            <!--remarks>
            <para>
            Если свойство <see cref="P:Nemiro.Data.Sql.SqlClient.ConnectionMode"/> имеет значение <see cref="F:Nemiro.Data.ConnectionMode.Auto"/> (по умолчанию),
            то соединения с базой данных будут закрываться автоматически и вызывать отдельно метод <see cref="M:Nemiro.Data.Sql.SqlClient.Disconnect"/> нет необходимости.
            </para>
            <para>При удалении экземпляра класса <see cref="T:Nemiro.Data.Sql.SqlClient"/>, все открытые соединения автоматически закрываются, независимо от значения свойства <see cref="P:Nemiro.Data.Sql.SqlClient.ConnectionMode"/>.</para>
            </remarks-->
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.ConnectionMode"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.Connect"/>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.GetData2(System.Data.SqlClient.SqlCommand)">
            <summary>
            Executes the query and returns DataSet, witho out caching.
            </summary>
            <param name="cmd">Command.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlClient.GenerateException(System.Exception)">
            <summary>
            Transmits an exception in the main stream.
            </summary>
            <param name="ex">Exception instance.</param>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlClient.ConnectionString">
            <summary>
            Connection string.
            Default value: <c>LocalSqlServer</c>.
            </summary>
            <value>Default value: <c>LocalSqlServer</c> (key name of the connection string in the.config file).</value>
            <!--remarks>
            <para>В качестве <see cref="P:Nemiro.Data.Sql.SqlClient.ConnectionString"/> можно указывать, как саму строку соединения, так и имя параметра в файле конфигурации.</para>
            <para>По умолчанию используется строка соединения с именем <c>LocalSqlServer</c>.
            В web-приложениях строка соединения с именем <c>LocalSqlServer</c> иметь путь к SQL Server по умолчанию. 
            Для использования параметра <c>LocalSqlServer</c> в веб-приложениях со своей базой данных, которая отличается от базы по умолчанию,
            необходимо удалить <c>LocalSqlServer</c> из файла конфигурации и добавить заново (написать код удаления и добавления):
            </para>
            <code lang="XML">
            &lt;remove name="LocalSqlServer"/&gt;
            &lt;add 
              name="LocalSqlServer" 
              connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=example;Trusted_Connection=True;" 
            /&gt;
            </code>
            <para>
            Как правило, изменение строки соединения в процессе разработки приложения при помощи свойства <see cref="P:Nemiro.Data.Sql.SqlClient.ConnectionString"/> не требуется.
            Обычно достаточно одной строки соединения. Если же возникает необходимость использовать нестандартную строку (отличную от <c>LocalSqlServer</c>), то её проще указывать при инициализации класса.
            </para>
            <code lang="C#">
            using (SqlClient client = new SqlClient(@"Data Source=.\SQLEXPRESS;Initial Catalog=example;Trusted_Connection=True;"))
            {
              // ...
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient("Data Source=.\SQLEXPRESS;Initial Catalog=example;Trusted_Connection=True;"))
              ' ...
            End Using
            </code>
            </remarks>
            <example>
            <para>В следующем примере в свойство <see cref="P:Nemiro.Data.Sql.SqlClient.ConnectionString"/> передается новая строка соединения с базой данных, которая будет использоваться при выполнении запросов в рамках жизни экземпляра класса <see cref="T:Nemiro.Data.Sql.SqlClient"/>.</para>
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              // устанавливаем строку соединения с базой данных
              client.ConnectionString = "Data Source=.\SQLEXPRESS;Initial Catalog=example;Trusted_Connection=True;";
              // формируем запрос к базе данных
              client.CommandText = "SELECT * FROM table";
              // выполняем запрос
              DataTable table = client.GetTable();
              // вывод результатов
              Console.WriteLine("Query execution time: {0}", client.LastQueryTime);
              Console.WriteLine("Получено данных: {0}", table.Rows.Count);
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient()
              ' устанавливаем строку соединения с базой данных
              client.ConnectionString = "Data Source=.\SQLEXPRESS;Initial Catalog=example;Trusted_Connection=True;"
              ' формируем запрос к базе данных
              client.CommandText = "SELECT * FROM table"
              ' выполняем запрос
              DataTable table = client.GetTable()
              ' вывод результатов
              Console.WriteLine("Query execution time: {0}", client.LastQueryTime)
              Console.WriteLine("Получено данных: {0}", table.Rows.Count)
            End Using
            </code>
            </example-->
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.ConnectionTimeout"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.ConnectionMode"/>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlClient.ConnectionMode">
            <summary>
            Connection mode.
            Default value <see cref="F:Nemiro.Data.ConnectionMode.Auto"/>, unless otherwise specified in the parameter <c>NeData:Sql:ConnectionMode</c> of configuration file.
            </summary>
            <!--remarks>
            <para>В режиме <see cref="F:Nemiro.Data.ConnectionMode.Auto"/> при каждом выполнении запроса к базе данных соединение автоматически открывается, а после - закрывается. Default value:</para>
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              // формируем запрос к базе данных
              client.CommandText = "SELECT * FROM table";
              // выполняем запрос
              // при этом открывается соединение с базой данных
              DataTable table = client.GetTable();
              // после выполнения запроса, соединение автоматически закрывается
              // выполняем еще один запрос, соединение опять открывается
              client.CommandText = "UPDATE table SET hits = hits + 1";
              client.ExecuteNonQuery();
              // после выполнения запроса, соединение автоматически закрывается
              // и т.д.
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient()
              ' формируем запрос к базе данных
              client.CommandText = "SELECT * FROM table"
              ' выполняем запрос
              ' при этом открывается соединение с базой данных
              Dim table As DataTable = client.GetTable()
              ' после выполнения запроса, соединение автоматически закрывается
              ' выполняем еще один запрос, соединение опять открывается
              client.CommandText = "UPDATE table SET hits = hits + 1"
              client.ExecuteNonQuery()
              ' после выполнения запроса, соединение автоматически закрывается
              ' и т.д.
            End Using
            </code>
            <para>В режиме <see cref="F:Nemiro.Data.ConnectionMode.Auto"/> не стоит беспокоиться о том, что соединение с базой данных может остаться открытым.
            В случае, если в процессе выполнения запроса возникает исключение (ошибка), то соединение закрывается, а лишь затем исключение передается приложению.</para>
            <para>
            В большинстве случаев такой подход оправдан. 
            Однако, если в рамках одно цикла жизни экземпляра класса <see cref="T:Nemiro.Data.Sql.SqlClient"/> необходимо выполнить серию запросов к базе данных, то имеет смысл использовать одно соединение.
            Для реализации этого, достаточно переключить <see cref="P:Nemiro.Data.Sql.SqlClient.ConnectionMode"/> в ручной режим (<see cref="F:Nemiro.Data.ConnectionMode.Manual"/>).
            Но тогда придется самостоятельно закрывать соединения, и писать дополнительный код на случаи возникнования исключений в процессе выполнения запросов к базе данных, 
            чтобы не оставалось открытых соединений, число которых, как известно, ограничено.
            </para>
            <para>Строго говоря, в ручном режиме соединение открывается автоматически, при первой необходимости. Вручную его нужно только закрывать.</para>
            <para>При вызове метода <see cref="M:Nemiro.Data.Sql.SqlClient.Dispose"/> соединение автоматически закрывается, независимо от значения <see cref="P:Nemiro.Data.Sql.SqlClient.ConnectionMode"/>.</para>
            </remarks>
            <example>
            <para>В следующем примере выполняться серия запросов к базе данных с использованием одного открытого соединения. При этом выполняется перехват исключений и ручное закрытие соединения с базой данных. Использование оператора <c>using</c> в данном случае невозможно.</para>
            <code lang="C#">
            // создаем экземпляр класса SqlClient
            SqlClient client = new SqlClient();
            // переключаемся в ручной режим управления соединением
            client.ConnectionMode = ConnectionMode.Manual;
            try
            {
              // выполняем серию из пяти запросов в безопасном блоке кода
              client.ExecuteNonQuery("INSERT INTO table (date) VALUES (GETDATE());");
              client.ExecuteNonQuery("INSERT INTO table (date) VALUES (GETDATE());");
              client.ExecuteNonQuery("INSERT INTO table (date) VALUES (GETDATE());");
              client.ExecuteNonQuery("INSERT INTO table (date) VALUES (GETDATE());");
              client.ExecuteNonQuery("INSERT INTO table (date) VALUES (GETDATE());");
            }
            catch (Exception ex)
            {
              // выводим сообщение об ошибке, 
              // если в процессе выполнения запросов возникнет исключение
              Console.WriteLine(ex.Message);
            }
            finally
            {
              // вручную закрываем соединение с базой данных
              client.Disconnect();
            }
            </code>
            <code lang="VB">
            ' создаем экземпляр класса SqlClient
            Dim client As new SqlClient()
            ' переключаемся в ручной режим управления соединением
            client.ConnectionMode = ConnectionMode.Manual
            Try
              ' выполняем серию из пяти запросов в безопасном блоке кода
              client.ExecuteNonQuery("INSERT INTO table (date) VALUES (GETDATE());")
              client.ExecuteNonQuery("INSERT INTO table (date) VALUES (GETDATE());")
              client.ExecuteNonQuery("INSERT INTO table (date) VALUES (GETDATE());")
              client.ExecuteNonQuery("INSERT INTO table (date) VALUES (GETDATE());")
              client.ExecuteNonQuery("INSERT INTO table (date) VALUES (GETDATE());")
            Catch ex As Exception 
              ' выводим сообщение об ошибке, 
              ' если в процессе выполнения запросов возникнет исключение
              Console.WriteLine(ex.Message)
            Finally
              ' вручную закрываем соединение с базой данных
              client.Disconnect()
            End Try
            </code>
            </example-->
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.ConnectionTimeout"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.ConnectionString"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.Connect"/>
            <seealso cref="M:Nemiro.Data.Sql.SqlClient.Disconnect"/>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlClient.ConnectionTimeout">
            <summary>
            Timeout connecting to the server (in seconds) before an exception.
            Default value: zero - used the server configuration.
            </summary>
            <!--remarks>
            Значение свойства <see cref="P:Nemiro.Data.Sql.SqlClient.ConnectionTimeout"/> будет автоматически добавлено к строке соединения в параметр <c>Connection Timeout</c>.
            Однако, если строка соединения уже содержит параметр <c>Connection Timeout</c>, то свойство <see cref="P:Nemiro.Data.Sql.SqlClient.ConnectionTimeout"/> игнорируется.
            </remarks-->
            <example>
            <!--para>В следующем примере устанавливается бесконечное время ожидания соединения с сервером.</para-->
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              client.ConnectionTimeout = int.MaxValue;
              // ...
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient())
              client.ConnectionTimeout = Integer.MaxValue
              ' ...
            End Using
            </code>
            </example>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.ConnectionMode"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.ConnectionString"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CommandTimeout"/>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlClient.CommandType">
            <summary>
            Command type for <see cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/>.
            Default value <see cref="F:Nemiro.Data.TypeCommand.Auto"/>, unless otherwise specified in the parameter <c>NeData:Sql:CommandType</c> of configuration file.
            </summary>
            <!--remarks>
            <para>Данное свойство является калькой с одноименного свойства класса <see cref="T:System.Data.SqlClient.SqlCommand"/>. Однако, в текущей реализации, помимо значений <see cref="F:Nemiro.Data.TypeCommand.StoredProcedure"/>, <see cref="F:Nemiro.Data.TypeCommand.TableDirect"/>, <see cref="F:Nemiro.Data.TypeCommand.Text"/>, это свойство может принимать еще одно дополнительное значение - <see cref="F:Nemiro.Data.TypeCommand.Auto"/> (используется по умолчанию).</para>
            <para>
            Свойство <see cref="P:Nemiro.Data.Sql.SqlClient.CommandType"/> работает совместно с <see cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/>. 
            В свойстве <see cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/> можно указать текст SQL-запроса, либо имя хранимой процедуры.
            Чтобы запрос был правильно интерпретирован, необходимо указывать <see cref="P:Nemiro.Data.Sql.SqlClient.CommandType"/>, по крайней мере в случае с классом <see cref="T:System.Data.SqlClient.SqlCommand"/>.
            </para>
            <para>В классе <see cref="T:Nemiro.Data.Sql.SqlClient"/>, при типе команды <see cref="F:Nemiro.Data.TypeCommand.Auto"/>, система пытается автоматически определить, что указано в <see cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/>: обычный SQL-запрос (<see cref="F:Nemiro.Data.TypeCommand.Text"/>) или хранимая процедура (<see cref="F:Nemiro.Data.TypeCommand.StoredProcedure"/>).</para>
            <para>Эта операция не требует больших затрат времени. Система проверяет значение <see cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/> по следующему примитивному шаблону:</para>
            <code>(SELECT(.+?)FROM)|(DELETE(\s+)FROM)|(UPDATE(.+?)SET)|(INSERT(\s+)INTO)</code>
            <para>Если <see cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/> совпадает с этим шаблоном, то система считает, что это <see cref="F:Nemiro.Data.TypeCommand.Text"/>.</para>
            <para>Если проверка по шаблону даст отрицательный результат, то система проверяет запрос на пробелы (включая переводы строк). Если пробелы есть, то <see cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/> интерпретируется как <see cref="F:Nemiro.Data.TypeCommand.Text"/>.</para>
            <para>В остальных случаях, <see cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/> будет восприниматься в качестве <see cref="F:Nemiro.Data.TypeCommand.StoredProcedure"/>.</para>
            </remarks-->
            <example>
            <!--para>
            В следующем примере явно устанавливается тип команды <see cref="F:Nemiro.Data.TypeCommand.StoredProcedure"/>, чтобы запрос выполнялся как хранимая процедура.
            В свойстве <see cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/> указано имя хранимой процедуры <c>MyProcedure</c>.
            Запрос выполняется методом <see cref="M:Nemiro.Data.Sql.SqlClient.ExecuteNonQuery"/> (без возврата результатов).
            </para-->
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              client.CommandType = TypeCommand.StoredProcedure;
              client.CommandText = "MyProcedure";
              client.ExecuteNonQuery();
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient())
              client.CommandType = TypeCommand.StoredProcedure
              client.CommandText = "MyProcedure"
              client.ExecuteNonQuery()
            End Using
            </code>
            </example>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CommandTimeout"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.Parameters"/>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlClient.CommandText">
            <summary>
            The text of the SQL statements or stored procedure name, you must perform.
            </summary>
            <!--remarks>
            <para>Данное свойство является калькой с одноименного свойства класса <see cref="T:System.Data.SqlClient.SqlCommand"/>.</para>
            <para>Если свойство <see cref="P:Nemiro.Data.Sql.SqlClient.CommandType"/> имеет значение <see cref="F:Nemiro.Data.TypeCommand.Auto"/>, то тип <see cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/> определяется автоматически.</para>
            <para>Если необходимо передать в запрос какие-либо параметры, используйте для этого свойство <see cref="P:Nemiro.Data.Sql.SqlClient.Parameters"/>. Не рекомендуется подставлять значения параметров напрямую в текст запроса, чтобы избежать возникнования уязвимости типа SQL Injection.</para>
            </remarks-->
            <example>
            <!--para>В следующем примере выполняется SQL-запрос для удаления записей из таблицы <c>table</c>, у которых значение поля <c>id</c> равняется <c>10</c>. 
            Запрос выполняется методом <see cref="M:Nemiro.Data.Sql.SqlClient.ExecuteNonQuery"/>.</para-->
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              client.CommandText = "DELETE FROM table WHERE id = 10";
              client.ExecuteNonQuery();
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient())
              client.CommandText = "DELETE FROM table WHERE id = 10"
              client.ExecuteNonQuery()
            End Using
            </code>
            </example>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CommandTimeout"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CommandType"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.Parameters"/>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlClient.Parameters">
            <summary>
            Collection of query parameters.
            </summary>
            <example>
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              client.CommandText = "SELECT first_name, last_name, age, sex FROM users WHERE age = @age AND sex = @sex";
              client.Parameters.Add("@age", SqlDbType.Int).Value = 30;
              client.Parameters.Add("@sex", SqlDbType.VarChar, 6).Value = "Female";
              var table = client.GetTable();
              foreach(var row in table.Rows)
              {
                Console.WriteLine("Имя: {0} {1}", row["first_name"], row["last_name"]);
                Console.WriteLine("Пол: {0}", row["sex"]);
                Console.WriteLine("Возраст: {0}", row["age"]);
              }
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient())
              client.CommandText = "SELECT first_name, last_name, age, sex FROM users WHERE age = @age AND sex = @sex"
              client.Parameters.Add("@age", SqlDbType.Int).Value = 30
              client.Parameters.Add("@sex", SqlDbType.VarChar, 6).Value = "Female"
              Dim table As DataTable = client.GetTable()
              For Each row As DataRow In table.Rows
                Console.WriteLine("Имя: {0} {1}", row("first_name"), row("last_name"))
                Console.WriteLine("Пол: {0}", row("sex"))
                Console.WriteLine("Возраст: {0}", row("age"))
              Next
            End Using
            </code>
            </example>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CommandTimeout"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CommandType"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.Parameters"/>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlClient.CommandTimeout">
            <summary>
            Timeout command (in seconds). The default value is <c>30</c> seconds.
            </summary>
            <example>
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              client.CommandText = "WAITFOR DELAY '00:00:05'";
              client.CommandTimeout = 1;
              client.ExecuteNonQuery();
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient())
              client.CommandText = "WAITFOR DELAY '00:00:05'"
              client.CommandTimeout = 1
              client.ExecuteNonQuery()
            End Using
            </code>
            </example>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.ConnectionTimeout"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CommandType"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CommandText"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.Parameters"/>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlClient.Cache">
            <summary>
            Provides access to parameters caching.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlClient.CacheType">
            <summary>
            Cache type. Default value is <see cref="F:Nemiro.Data.CachingType.Auto"/>, unless otherwise specified in the parameter <c>NeData:Sql:CacheType</c> of configuration files.
            </summary>
            <example>
            <code lang="XML">
            &lt;appSettings&gt;
              &lt;clear /&gt;
              &lt;!--Cache type--&gt;
              &lt;add key="NeData:Sql:CacheType" value="File" /&gt;
              &lt;!--File cache storage path--&gt;
              &lt;add key="NeData:Sql:CachePath" value="C:\Cache\MyApplication" /&gt;
              &lt;!--File cache buffer size (Kb)--&gt;
              &lt;add key="NeData:Sql:CacheBufferSize" value="10240" /&gt;
            &lt;/appSettings&gt;
            </code>
            </example>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheDuration"/>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlClient.CacheCustom">
            <summary>
            Custom cache type. Used with <see cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/> and <see cref="P:Nemiro.Data.Sql.SqlClient.CacheCustomArgs"/>.
            </summary>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheDuration"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheCustomArgs"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlClient.CacheCustomArgs">
            <summary>
            Array of additional parameters for initialization custom cache.
            Used with <see cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/> and <see cref="P:Nemiro.Data.Sql.SqlClient.CacheCustom"/>.
            </summary>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheDuration"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheCustom"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlClient.CacheName">
            <summary>
            Name of the key cache entry (optional).
            </summary>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheDuration"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlClient.CacheDuration">
            <summary>
            Duration of storage in the cache entry (in seconds).
            </summary>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlClient.CachePath">
            <summary>
            The path of storage a cache files. Using only with <see cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/> = <see cref="F:Nemiro.Data.CachingType.File"/>.
            </summary>
            <remarks>
            <para>Use the configuration file for this setting.</para>
            <code lang="XML">
            &lt;appSettings&gt;
              &lt;clear /&gt;
              &lt;!--Cache type--&gt;
              &lt;add key="NeData:Sql:CacheType" value="File" /&gt;
              &lt;!--Cache path--&gt;
              &lt;add key="NeData:Sql:CachePath" value="C:\cache\MyApplication" /&gt;
            &lt;/appSettings&gt;
            </code>
            <para>If the specified directory does not exist, it is created automatically.</para>
            <para>When using the file cache in projects ASP. NET, ensure that the application and the IIS user have access for write and for modify the contents of a directory <see cref="P:Nemiro.Data.Sql.SqlClient.CachePath"/>.</para>
            </remarks>
            <example>
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              client.CacheDuration = 1200; // 20 minutes
              client.CacheType = CachingType.File;
              client.CachePath = @"C:\cache\MyApplication";
              client.CommandText = "SELECT * FROM users";
              var table = client.GetTable();
              Console.WriteLine("Rows: {0}", table.Rows.Count);
              Console.WriteLine("Query execution time: {0}", client.LastQueryTime);
              Console.WriteLine("From cache: {0}", client.LastQueryResultsFromCache);
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient()
              client.CacheDuration = 1200 ' 20 minutes
              client.CacheType = CachingType.File
              client.CachePath = "C:\cache\MyApplication"
              client.CommandText = "SELECT * FROM users"
              Dim table As DataTable = client.GetTable()
              Console.WriteLine("Rows: {0}", table.Rows.Count)
              Console.WriteLine("Query execution time: {0}", client.LastQueryTime)
              Console.WriteLine("From cache: {0}", client.LastQueryResultsFromCache)
            End Using
            </code>
            </example>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheDuration"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheBufferSize"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheBufferAccessTimeout"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheAccessTimeout"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheBinder"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlClient.CacheBinder">
            <summary>
            Type serializer of custom objects.
            </summary>
            <remarks>
            <para>Used only if the property <see cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/> value has <see cref="F:Nemiro.Data.CachingType.File"/>.</para>
            <para>If not specified, the default is <see cref="T:Nemiro.Data.Caching.CacheBinder"/>.</para>
            <para>
            Changing this property can not be programmatically.
			Please, use configuration file for it.
            </para>
            <code lang="XML">
            &lt;appSettings&gt;
              &lt;clear /&gt;
              &lt;!--Cache type--&gt;
              &lt;add key="NeData:Sql:CacheType" value="File" /&gt;
              &lt;!--Cache binder--&gt;
              &lt;add key="NeData:Sql:CacheBinder" value="MyCacheBinder" /&gt;
            &lt;/appSettings&gt;
            </code>
			</remarks>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheDuration"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CachePath"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlClient.CacheBufferSize">
            <summary>
            File cache (<see cref="F:Nemiro.Data.CachingType.File"/>) memory buffer size (Kb). 
            Default value is <c>2048</c> Kb (<c>2</c> Mb).
            </summary>
            <remarks>
            <para>The buffer is used only if the property <see cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/> value has <see cref="F:Nemiro.Data.CachingType.File"/>.</para>
            <para>You can use configuration file for this setting.</para>
            <code lang="XML">
            &lt;appSettings&gt;
              &lt;clear /&gt;
              &lt;!--Cache type--&gt;
              &lt;add key="NeData:Sql:CacheType" value="File" /&gt;
              &lt;!--Cache storage--&gt;
              &lt;add key="NeData:Sql:CachePath" value="C:\cache\MyApplication" /&gt;
              &lt;!--Memory buffer size 50 Mb (50 Mb * (1 Mb = 1024 Kb) = 51 200 Kb)--&gt;
              &lt;add key="NeData:Sql:CacheBufferSize" value="51200" /&gt;
            &lt;/appSettings&gt;
            </code>
            </remarks>
            <example>
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              client.CacheDuration = 1200; // 20 minutes * 60 seconds = 1 200 seconds
              client.CacheType = CachingType.File;
              // memory buffer size - 100 Mb
              client.CacheBufferSize = 102400;
              // build query
              client.CommandText = "SELECT * FROM users";
              // execution query
              var table = client.GetTable();
              // output
              Console.WriteLine("Rows: {0}", table.Rows.Count);
              Console.WriteLine("Query execution time: {0}", client.LastQueryTime);
              Console.WriteLine("From cache: {0}", client.LastQueryResultsFromCache);
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient()
              client.CacheDuration = 1200 ' 20 minutes * 60 seconds = 1 200 seconds
              client.CacheType = CachingType.File
              ' memory buffer size - 100 Mb
              client.CacheBufferSize = 102400
              ' build query
              client.CommandText = "SELECT * FROM users"
              ' execution query
              Dim table As DataTable = client.GetTable()
              ' output
              Console.WriteLine("Rows: {0}", table.Rows.Count)
              Console.WriteLine("Query execution time: {0}", client.LastQueryTime)
              Console.WriteLine("From cache: {0}", client.LastQueryResultsFromCache)
            End Using
            </code>
            </example>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CachePath"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheDuration"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheBufferAccessTimeout"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheAccessTimeout"/>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlClient.CacheBufferAccessTimeout">
            <summary>
            Waiting time gain access to the buffer of file cache (<see cref="F:Nemiro.Data.CachingType.File"/>). 
            </summary>
            <value>Default value is <see cref="F:System.TimeSpan.Zero"/>.</value>
            <remarks>
            <para>The buffer is used only if the property <see cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/> value has <see cref="F:Nemiro.Data.CachingType.File"/>.</para>
            <para>Minimal <c>100</c> milliseconds.</para>
            <para>At the time of waiting, the current thread can be blocked for <c>100</c> milliseconds.</para>
            </remarks>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheAccessTimeout"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheBufferSize"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheDuration"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CachePath"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlClient.CacheAccessTimeout">
            <summary>
            Waiting time gain access to the entry of file cache (<see cref="F:Nemiro.Data.CachingType.File"/>).
            After this time, if the file entry are not available, an exception is thrown.
            </summary>
            <value>Default value is <see cref="F:System.TimeSpan.Zero"/>.</value>
            <remarks>
            <para>Is used only if the property <see cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/> value has <see cref="F:Nemiro.Data.CachingType.File"/>.</para>
            <para>Minimal <c>100</c> milliseconds.</para>
            <para>At the time of waiting, the current thread can be blocked for <c>100</c> milliseconds.</para>
            </remarks>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheBufferAccessTimeout"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheBufferSize"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheDuration"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CachePath"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlClient.LastQueryTime">
            <summary>
            Elapsed time of the last query to the database.
            </summary>
            <example>
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              client.CommandText = "WAITFOR DELAY '00:00:03'";
              client.ExecuteNonQuery();
              Console.WriteLine("Query execution time: {0}", client.LastQueryTime);
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient()
              client.CommandText = "WAITFOR DELAY '00:00:03'"
              client.ExecuteNonQuery();
              Console.WriteLine("Query execution time: {0}", client.LastQueryTime);
            End Using
            </code>
            </example>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.LastQueryResultsFromCache"/>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlClient.LastQueryResultsFromCache">
            <summary>
            Is <c>True</c>, if the last query result was obtained from the cache. 
            </summary>
            <example>
            <code lang="C#">
            using (SqlClient client = new SqlClient())
            {
              // query with cache
              client.CacheDuration = 1200;
              client.CommandText = "SELECT TOP 100 * FROM proxy";
              var table = client.GetTable();
              Console.WriteLine("1. From cache: {0}", client.LastQueryResultsFromCache);
              // re-execute the query
              var table = client.GetTable();
              Console.WriteLine("2. From cache: {0}", client.LastQueryResultsFromCache);
            }
            </code>
            <code lang="VB">
            Using client As New SqlClient()
              ' query with cache
              client.CacheDuration = 1200
              client.CommandText = "SELECT TOP 100 * FROM proxy"
              Dim table As DataTable = client.GetTable()
              Console.WriteLine("1. From cache: {0}", client.LastQueryResultsFromCache)
              ' re-execute the query
              table = client.GetTable()
              Console.WriteLine("2. From cache: {0}", client.LastQueryResultsFromCache)
            End Using
            </code>
            </example>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.LastQueryTime"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheDuration"/>
            <seealso cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/>
        </member>
        <member name="T:Nemiro.Data.NoPrimaryKeyOrUniqueFieldsException">
            <summary>
            An exception occurs if the class could not find any properties with flags <see cref="F:Nemiro.Data.ColumnAttributeFlags.PrimaryKey"/> or <see cref="F:Nemiro.Data.ColumnAttributeFlags.Unique"/>.
            </summary>
            <remarks>
            <para>This exception can occur in the methods of working with data in ORM classes.</para>
            <para>To fix the error, add at least one attribute <see cref="T:Nemiro.Data.ColumnAttribute"/>
            with flags <see cref="F:Nemiro.Data.ColumnAttributeFlags.PrimaryKey"/> or <see cref="F:Nemiro.Data.ColumnAttributeFlags.Unique"/>.</para>
            </remarks>
        </member>
        <member name="M:Nemiro.Data.NoPrimaryKeyOrUniqueFieldsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.NoPrimaryKeyOrUniqueFieldsException"/> class.
            </summary>
        </member>
        <member name="T:Nemiro.Data.Caching.SerializableDataColumnCollection">
            <summary>
            Collection of serialized <see cref="T:System.Data.DataColumn"/>.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.SerializableDataColumnCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Caching.SerializableDataColumnCollection"/> class.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.SerializableDataColumnCollection.#ctor(System.Data.DataColumnCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Caching.SerializableDataColumnCollection"/> class.
            </summary>
            <param name="columns">Source of creation the <see cref="T:Nemiro.Data.Caching.SerializableDataColumnCollection"/>.</param>
        </member>
        <member name="M:Nemiro.Data.Helper.ConvertCommandType(Nemiro.Data.TypeCommand,System.String)">
            <summary>
            Converts local command type to normal.
            </summary>
            <param name="cmdType">Local command type.</param>
            <param name="cmdText">T-SQL.</param>
        </member>
        <member name="M:Nemiro.Data.Helper.GetSetting(System.String,System.Boolean)">
            <summary>
            Returns the value of the specified settings.
            </summary>
            <param name="key">Key.</param>
            <param name="connectionString">Priority to connection string.</param>
        </member>
        <member name="M:Nemiro.Data.Helper.GetConnectionString(System.String,System.Int32)">
            <summary>
            Returns connection string to the database.
            </summary>
            <param name="value">Connection string or connection string name in the configuration file.</param>
            <param name="connectionTimeout">Connection timeout.</param>
        </member>
        <member name="M:Nemiro.Data.Helper.GetColumnAttribute(System.Reflection.PropertyInfo)">
            <summary>
            Finds and returns ColumnAttribute specified property.
            </summary>
            <param name="property">Property.</param>
        </member>
        <member name="M:Nemiro.Data.Helper.SetSqlParametersFromUniqueProperties(System.Object,Nemiro.Data.Sql.SqlClient)">
            <summary>
            Set query parameters with Unique flag.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Helper.ChangeType(System.Object,System.Type)">
            <summary>
            Returns an object of the specified type.
            </summary>
            <param name="value">Object.</param>
            <param name="conversionType">Target type.</param>
        </member>
        <member name="P:Nemiro.Data.Helper.IsWeb">
            <summary>
            Is <c>true</c>, if the current application is a web project.
            </summary>
        </member>
        <member name="T:Nemiro.Data.Caching.CacheCleanupResult">
            <summary>
            Result cache cleanup.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheCleanupResult.Removed">
            <summary>
            Number of deleted records.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheCleanupResult.RemovedSize">
            <summary>
            The volume of deleted records (in bytes).
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheCleanupResult.Errors">
            <summary>
            Number of errors.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheCleanupResult.TimeElapsed">
            <summary>
            Elapsed time.
            </summary>
        </member>
        <member name="T:Nemiro.Data.DataObjectCollection`1">
            <summary>
            Collection of database entities.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
        </member>
        <member name="M:Nemiro.Data.DataObjectCollection`1.#ctor(System.Type,System.Int32,System.Int32,System.Int32,System.String[],System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.DataObjectCollection`1"/> class.
            </summary>
            <param name="T">The entity type.</param>
            <param name="recorsPerPage">Maximum number of records per page.</param>
            <param name="currentPage">Current page.</param>
            <param name="totalRecords">The total number of entries on request without regard pages.</param>
            <param name="includedFields">The list of fields that are included in the query.</param>
            <param name="sorted">Sorting records.</param>
            <param name="filtered">Filter records.</param>
        </member>
        <member name="M:Nemiro.Data.DataObjectCollection`1.#ctor(Nemiro.Data.DataObjectCollection{Nemiro.Data.Sql.BaseObject})">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.DataObjectCollection`1"/> class by <see cref="T:Nemiro.Data.Sql.BaseObject"/>.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nemiro.Data.DataObjectCollection`1.PreviousPage">
            <summary>
            Loads the collection of list entries to the previous page.
            </summary>
        </member>
        <member name="M:Nemiro.Data.DataObjectCollection`1.NextPage">
            <summary>
            Loads the collection of list entries to the next page.
            </summary>
        </member>
        <member name="M:Nemiro.Data.DataObjectCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds items to the collection.
            </summary>
            <param name="items">Items that should be added to the collection.</param>
        </member>
        <member name="M:Nemiro.Data.DataObjectCollection`1.IndexOf(`0)">
            <summary>
           Determines the index of the specified item in the collection.
            </summary>
            <param name="item">Item, the index is to be determined.</param>
        </member>
        <member name="M:Nemiro.Data.DataObjectCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the list at the specified location.
            </summary>
            <param name="index">Index (zero) at which to insert <paramref name="item"/>.</param>
            <param name="item">Insertion item.</param>
        </member>
        <member name="M:Nemiro.Data.DataObjectCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">Index (zero) item, which must be removed.</param>
        </member>
        <member name="M:Nemiro.Data.DataObjectCollection`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">Item to be added to the collection.</param>
        </member>
        <member name="M:Nemiro.Data.DataObjectCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Nemiro.Data.DataObjectCollection`1.Contains(`0)">
            <summary>
            Determines whether the collection contains the specified item or not.
            </summary>
            <param name="item">Required item.</param>
        </member>
        <member name="M:Nemiro.Data.DataObjectCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the items to the array.
            </summary>
            <param name="array">Target one-dimensional array.</param>
            <param name="arrayIndex">Index (zero) at which to begin copying.</param>
        </member>
        <member name="M:Nemiro.Data.DataObjectCollection`1.Remove(`0)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="item">Item that should be removed.</param>
        </member>
        <member name="M:Nemiro.Data.DataObjectCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
        </member>
        <member name="M:Nemiro.Data.DataObjectCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
        </member>
        <member name="P:Nemiro.Data.DataObjectCollection`1.Items">
            <summary>
            Items collection.
            </summary>
        </member>
        <member name="P:Nemiro.Data.DataObjectCollection`1.CurrentPage">
            <summary>
            Current page.
            </summary>
        </member>
        <member name="P:Nemiro.Data.DataObjectCollection`1.TotalRecords">
            <summary>
            The total number of entries on request without regard pages.
            </summary>
        </member>
        <member name="P:Nemiro.Data.DataObjectCollection`1.RecordsPerPage">
            <summary>
            Maximum number of records per page.
            </summary>
        </member>
        <member name="P:Nemiro.Data.DataObjectCollection`1.TotalPages">
            <summary>
            Total number of pages.
            </summary>
        </member>
        <member name="P:Nemiro.Data.DataObjectCollection`1.IncludedFields">
            <summary>
            The list of fields that are included in the query.
            </summary>
        </member>
        <member name="P:Nemiro.Data.DataObjectCollection`1.Sorted">
            <summary>
            Sorting records.
            </summary>
        </member>
        <member name="P:Nemiro.Data.DataObjectCollection`1.Filtered">
            <summary>
            Filter records.
            </summary>
        </member>
        <member name="P:Nemiro.Data.DataObjectCollection`1.Item(System.Int32)">
            <summary>
            Returns the item at the specified index.
            </summary>
            <param name="index">Index (zero) item to be obtained.</param>
        </member>
        <member name="P:Nemiro.Data.DataObjectCollection`1.Count">
            <summary>
            Returns the number of items in the collection.
            </summary>
        </member>
        <member name="P:Nemiro.Data.DataObjectCollection`1.IsReadOnly">
            <summary>
            ReadOnly or not ReadOnly, that is the question :)
            </summary>
        </member>
        <member name="T:Nemiro.Data.ConnectionStringNullException">
            <summary>
            An exception occurs if the connection string to the database is not specified.
            </summary>
        </member>
        <member name="M:Nemiro.Data.ConnectionStringNullException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.ConnectionStringNullException"/> class.
            </summary>
        </member>
        <member name="T:Nemiro.Data.Caching.FileCache">
            <summary>
            Implements the cache in file system.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.#ctor">
            <summary>
            Initializes a new instance of the file cache.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.#ctor(System.String)">
            <summary>
            Initializes a new instance of the file cache with specified storage path.
            </summary>
            <param name="cachePath">Storage path.</param>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the file cache with specified storage path and memory buffer size.
            </summary>
            <param name="cachePath">Storage path.</param>
            <param name="bufferSize">Memory buffer size (Kb).</param>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.#ctor(System.Runtime.Serialization.SerializationBinder)">
            <summary>
            Initializes a new instance of the file cache with custom type binder.
            </summary>
            <param name="binder">Class instance for serialization a custom objects.</param>
            <remarks>Default is <see cref="T:Nemiro.Data.Caching.CacheBinder"/>.</remarks>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.#ctor(System.String,System.Runtime.Serialization.SerializationBinder)">
            <summary>
            Initializes a new instance of the file cache with  specified storage path and  custom type binder.
            </summary>
            <param name="cachePath">Storage path.</param>
            <param name="binder">Class instance for serialization a custom objects.</param>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.#ctor(System.String,System.Int64,System.Runtime.Serialization.SerializationBinder)">
            <summary>
            Initializes a new instance of the file cache.
            </summary>
            <param name="cachePath">Storage path.</param>
            <param name="binder">Class instance for serialization a custom objects.</param>
            <param name="bufferSize">Memory buffer size (Kb).</param>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.#ctor(System.String,System.Int64,System.Runtime.Serialization.SerializationBinder,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the file cache.
            </summary>
            <param name="cachePath">Storage path.</param>
            <param name="binder">Class instance for serialization a custom objects.</param>
            <param name="bufferSize">Memory buffer size (Kb).</param>
            <param name="bufferAccessTime">
            Waiting time gain access to the memory buffer.
            </param>
            <param name="accessTime">Waiting time gain access to the file of cache entry. After this time, if the file entry are not available, an exception is thrown.</param>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.GetKeys(System.String)">
            <summary>
            Returns a list of all the keys for the specified region. 
            </summary>
            <param name="regionName">Name of the region. Default: <c>null</c> (<c>Nothing</c>).</param>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.GetStream(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Returns a file stream.
            </summary>
            <param name="path"></param>
            <param name="mode"></param>
            <param name="access"></param>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.ReadFile(System.String,System.String,System.Runtime.Serialization.SerializationBinder)">
            <summary>
            Reads a file and returns the cache entry.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.WriteFile(System.String,Nemiro.Data.Caching.CacheEntry,System.String)">
            <summary>
            Writes data to a file.
            </summary>
            <param name="key">Cache entry key.</param>
            <param name="entry">Cache entry data.</param>
            <param name="regionName">Region name.</param>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.DeleteCacheFiles(System.String,System.String)">
            <summary>
            Deletes files cache entry.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.DeleteFile(System.String)">
            <summary>
            Delete file.
            </summary>
            <param name="path">File path.</param>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.GetPolicy(System.String,System.String,System.Runtime.Serialization.SerializationBinder)">
            <summary>
            Returns cache entry policy.
            </summary>
            <param name="key">Cache entry key.</param>
            <param name="regionName">Name of the region. Default: <c>null</c> (<c>Nothing</c>).</param>
            <param name="binder">Class instance for serialization a custom objects.</param>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.UpdatePolicy(System.String,Nemiro.Data.Caching.CacheEntryPolicy,System.String)">
            <summary>
            Updates the specified policy cache entry.
            </summary>
            <param name="key">Cache entry key.</param>
            <param name="regionName">Name of the region. Default: <c>null</c> (<c>Nothing</c>)</param>
            <param name="policy">Cache entry policy.</param>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.UpdatePolicy(System.String,Nemiro.Data.Caching.CacheEntry,System.String)">
            <summary>
            Updates the specified policy cache entry.
            </summary>
            <param name="key">Cache entry key.</param>
            <param name="entry">Cache entry.</param>
            <param name="regionName">Name of the region. Default: <c>null</c> (<c>Nothing</c>)</param>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.HasCacheFiles(System.String,System.String)">
            <summary>
            Checks the integrity of the cache files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.GetCacheDataPath(System.String,System.String)">
            <summary>
            Returns the path to the cache data file.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.GetCachePolicyPath(System.String,System.String)">
            <summary>
            Returns the path to the cache policy file.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.GetCacheDirPath(System.String)">
            <summary>
            Returns the path of cache storage.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.GetCacheFileSize(System.String,System.String)">
            <summary>
            Returns the files size of cache entry.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>
            Inserts a cache entry into the cache.
            </summary>
            <param name="key">A unique identifier for the cache entry to add or get.</param>
            <param name="value">The data for the cache entry.</param>
            <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
            <param name="regionName">A named region in the cache to which a cache entry can be added. Default: <c>null</c> (<c>Nothing</c>).</param>
            <returns>If a matching cache entry already exists, a cache entry; otherwise, null (Nothing).</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Inserts a cache entry into the cache.
            </summary>
            <param name="value">The data for the cache entry.</param>
            <param name="policy">An object that contains eviction details for the cache entry.</param>
            <returns>If a matching cache entry already exists, a cache entry; otherwise, null (Nothing).</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)">
            <summary>
            Adds a cache entry into the cache using the specified key and a value and an absolute expiration value.  
            </summary>
            <param name="key">A unique identifier for the cache entry to add or get.</param>
            <param name="value">The data for the cache entry.</param>
            <param name="absoluteExpiration">The fixed date and time at which the cache entry will expire.</param>
            <param name="regionName">A named region in the cache to which a cache entry can be added. </param>
            <returns>If a matching cache entry already exists, a cache entry; otherwise, null (Nothing).</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.Contains(System.String,System.String)">
            <summary>
            Determines whether a cache entry exists in the cache.
            </summary>
            <param name="key">A unique identifier for the cache entry to add or get.</param>
            <param name="regionName">A named region in the cache to which a cache entry was added.</param>
            <returns><c>True</c> if the cache contains a cache entry whose key matches key; otherwise, <c>False</c>.</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
			      Creates a <see cref="T:System.Runtime.Caching.CacheEntryChangeMonitor"/> object that can trigger events in response to changes to specified cache entries.
            </summary>
            <param name="keys">An enumeration of unique cache entry keys.</param>
            <param name="regionName">A named region in the cache to which a cache entry can be added.</param>
            <remarks>Not supported.</remarks>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.Get(System.String,System.String)">
            <summary>
            Returns an entry from the cache.
            </summary>
            <param name="key">A unique identifier for the cache entry to get.</param>
            <param name="regionName">A named region in the cache to which a cache entry was added.</param>
            <returns>A reference to the cache entry that is identified by <paramref name="key"/>, if the entry exists; otherwise, <c>null</c> (<c>Nothing</c>).</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.GetCacheItem(System.String,System.String)">
            <summary>
            Returns the specified entry from the cache as a <see cref="T:System.Runtime.Caching.CacheItem"/> instance.
            </summary>
            <param name="key">A unique identifier for the cache entry to get.</param>
            <param name="regionName">A named region in the cache to which a cache entry was added.</param>
            <returns>A reference to the cache entry that is identified by <paramref name="key"/>, if the entry exists; otherwise, <c>null</c> (<c>Nothing</c>).</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.GetCount(System.String)">
            <summary>
            Returns the total number of cache entries in the cache.
            </summary>
            <param name="regionName">A named region in the cache to which a cache entry was added. </param>
            <returns>The number of entries in the cache.</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.GetEnumerator(System.String)">
            <summary>
            Creates an enumerator that can be used to iterate through a collection of cache entries.
            </summary>
            <param name="regionName">A named region in the cache to which a cache entry was added.</param>
            <returns>The enumerator object that provides access to the items in the cache.</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.GetEnumerator">
            <summary>
            Creates an enumerator that can be used to iterate through a collection of cache entries.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Returns a set of cache entries that correspond to the specified keys.
            </summary>
            <param name="keys">A set of unique identifiers for the cache entries to return.</param>
            <param name="regionName">A named region in the cache to which a cache entry was added.</param>
            <returns>A set of cache entries that correspond to the specified keys.</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.Remove(System.String,System.String)">
            <summary>
            Removes a cache entry from the cache.
            </summary>
            <param name="key">A unique identifier for the cache entry to remove.</param>
            <param name="regionName">A named region in the cache to which a cache entry was added.</param>
            <returns>If the entry is found in the cache, the removed cache entry; otherwise, <c>null</c> (<c>Nothing</c>).</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>
            Inserts a cache entry into the cache by using a key and a value and eviction. 
            </summary>
            <param name="key">A unique identifier for the cache entry to add or get.</param>
            <param name="regionName">A named region in the cache to which a cache entry was added.</param>
            <param name="policy">An object that contains eviction details for the cache entry.</param>
            <param name="value">The data for the cache entry.</param>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
			      Inserts a cache entry into the cache by using a <see cref="T:System.Runtime.Caching.CacheItem"/> instance to supply the key and value for the cache entry.
            </summary>
            <param name="item">The data for the cache entry.</param>
            <param name="policy">An object that contains eviction details for the cache entry.</param>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.Set(System.String,System.Object,System.DateTimeOffset,System.String)">
            <summary>
            Inserts a cache entry into the cache by using a key and a value and specifies time-based expiration details.
            </summary>
            <param name="key">A unique identifier for the cache entry to add or get.</param>
            <param name="regionName">A named region in the cache to which a cache entry was added.</param>
            <param name="value">The data for the cache entry.</param>
            <param name="absoluteExpiration">Фиксированные дата и время истечения срока действия записи кэша.</param>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.ToString">
            <summary>
            Returns cache storage path.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.CleanupAll">
            <summary>
            Removes all entries from the cache.
            </summary>
            <seealso cref="M:Nemiro.Data.Caching.FileCache.Cleanup"/>
        </member>
        <member name="M:Nemiro.Data.Caching.FileCache.Cleanup">
            <summary>
            Removes outdated entries from the cache.
            </summary>
            <seealso cref="M:Nemiro.Data.Caching.FileCache.CleanupAll"/>
        </member>
        <member name="P:Nemiro.Data.Caching.FileCache.Binder">
            <summary>
            Serializer custom types.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.FileCache.BufferSize">
            <summary>
            Memory buffer size (Kb). 
            </summary>
            <value>
            Default value: <c>2048</c> Kb (<c>2</c> Mb).
            </value>
            <seealso cref="P:Nemiro.Data.Caching.FileCache.BufferAccessTimeout"/>
        </member>
        <member name="P:Nemiro.Data.Caching.FileCache.BufferAccessTimeout">
            <summary>
            Waiting time gain access to the buffer.
            </summary>
            <value>Default value is <see cref="F:System.TimeSpan.Zero"/>.</value>
            <remarks>
            <para>Minimal <c>100</c> milliseconds.</para>
            <para>At the time of waiting, the current thread can be blocked for <c>100</c> milliseconds.</para>
            </remarks>
            <example>
            <code lang="C#">
            var fileCache = new Nemiro.Data.Caching.FileCache();
            fileCache.BufferAccessTimeout = new TimeSpan(0, 0, 1); // 1 second
            </code>
            <code lang="VB">
            Dim fileCache As New Nemiro.Data.Caching.FileCache()
            fileCache.BufferAccessTimeout = New TimeSpan(0, 0, 1) ' 1 second
            </code>
            </example>
            <seealso cref="P:Nemiro.Data.Caching.FileCache.BufferSize"/>
        </member>
        <member name="P:Nemiro.Data.Caching.FileCache.CachePath">
            <summary>
            Cache storage path.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.FileCache.DefaultCachePath">
            <summary>
            Default cache storage path.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.FileCache.DefaultRegion">
            <summary>
            Default region name.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.FileCache.DefaultPolicy">
            <summary>
            Default cache policy.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.FileCache.AccessTimeout">
            <summary>
            Waiting time gain access to the file of cache entry. After this time, if the file entry are not available, an exception is thrown.
            </summary>
            <value>Default value is <see cref="F:System.TimeSpan.Zero"/>.</value>
            <remarks>
            <para>Minimal <c>100</c> milliseconds.</para>
            <para>At the time of waiting, the current thread can be blocked for <c>100</c> milliseconds.</para>
            </remarks>
            <example>
            <code lang="C#">
            var fileCache = new Nemiro.Data.Caching.FileCache();
            fileCache.AccessTimeout = new TimeSpan(0, 0, 3); // 3 seconds
            </code>
            <code lang="VB">
            Dim fileCache As New Nemiro.Data.Caching.FileCache()
            fileCache.AccessTimeout = New TimeSpan(0, 0, 3) ' 3 seconds
            </code>
            </example>
        </member>
        <member name="P:Nemiro.Data.Caching.FileCache.Item(System.String)">
            <summary>
			      Gets or sets a value in the cache by using the default indexer property for an instance of the <see cref="F:FileCache"/> class.
            </summary>
            <param name="key">A unique identifier for the cache entry to add or get.</param>
        </member>
        <member name="P:Nemiro.Data.Caching.FileCache.DefaultCacheCapabilities">
            <summary>
            Gets a description of the features that the cache provides.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.FileCache.Name">
            <summary>
            Gets the name of the cache.
            </summary>
        </member>
        <member name="T:Nemiro.Data.StringOrBinaryDataWouldBeTruncatedException">
            <summary>
            This exception occurs if some of the fields of the table are added values ​​which exceed the allowable size of the fields in the table.
            </summary>
        </member>
        <member name="M:Nemiro.Data.StringOrBinaryDataWouldBeTruncatedException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.StringOrBinaryDataWouldBeTruncatedException"/> class.
            </summary>
        </member>
        <member name="T:Nemiro.Data.Caching.CacheEntry">
            <summary>
            Serializable cache entry.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.CacheEntry.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Caching.CacheEntry"/> class.
            </summary>
            <param name="data">The data for the cache entry.</param>
        </member>
        <member name="M:Nemiro.Data.Caching.CacheEntry.#ctor(System.Object,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Caching.CacheEntry"/> class.
            </summary>
            <param name="data">The data for the cache entry.</param>
            <param name="policy">Cache entry policy.</param>
        </member>
        <member name="M:Nemiro.Data.Caching.CacheEntry.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes the value to stream.
            </summary>
            <param name="stream">Target stream.</param>
            <param name="value">Data.</param>
        </member>
        <member name="M:Nemiro.Data.Caching.CacheEntry.Deserialize(System.IO.Stream,System.Runtime.Serialization.SerializationBinder)">
            <summary>
            Deserializes the value from the stream.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="binder">Class instance for serialization a custom objects.</param>
        </member>
        <member name="M:Nemiro.Data.Caching.CacheEntry._Serialize(System.IO.Stream)">
            <summary>
            Serializes itself entirely to the stream.
            </summary>
            <param name="stream">Target stream.</param>
        </member>
        <member name="M:Nemiro.Data.Caching.CacheEntry._Deserialize(System.IO.Stream,System.Runtime.Serialization.SerializationBinder)">
            <summary>
            Deserializes data from stream to current class instance.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="binder">Class instance for serialization a custom objects.</param>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheEntry.Value">
            <summary>
            The data for the cache entry.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheEntry.Policy">
            <summary>
            Cache entry policy.
            </summary>
        </member>
        <member name="T:Nemiro.Data.DuplicateTableNameException">
            <summary>
            An exception occurs if the database already has a table with the specified name.
            </summary>
        </member>
        <member name="M:Nemiro.Data.DuplicateTableNameException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.DuplicateTableNameException"/> class.
            </summary>
        </member>
        <member name="T:Nemiro.Data.Caching.CacheInfo">
            <summary>
            Provides access to parameters caching.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.CacheInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Caching.CacheInfo"/> class.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.CacheInfo.SetDefault">
            <summary>
            Resets to the default values​​.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.CacheInfo.SetFromConfig">
            <summary>
            Resets to the default values and loads the new settings from the application configuration file.
            </summary>
            <remarks>
            <para>
            It's not work in <see cref="T:Nemiro.Data.Sql.SqlClient"/> class.
            </para>
            </remarks>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheInfo.CacheType">
            <summary>
            Cache type. Default value is <see cref="F:Nemiro.Data.CachingType.Auto"/>.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheInfo.Custom">
            <summary>
            Type of custom cache.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheInfo.CustomArgs">
            <summary>
            Additional parameters for initialization a custom cache.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheInfo.CacheName">
            <summary>
            Cache entry name.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheInfo.Duration">
            <summary>
            Duration caching the query results (in seconds).
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheInfo.CachePath">
            <summary>
            The path of storage a cache files. Using only with <see cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/> = <see cref="F:Nemiro.Data.CachingType.File"/>.
            </summary>
            <seealso cref="T:Nemiro.Data.Caching.FileCache"/>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheInfo.BufferSize">
            <summary>
            File cache (<see cref="F:Nemiro.Data.CachingType.File"/>) memory buffer size (Kb). 
            Default value is <c>2048</c> Kb (<c>2</c> Kb).
            </summary>
            <seealso cref="P:Nemiro.Data.Caching.CacheInfo.BufferAccessTimeout"/>
            <seealso cref="T:Nemiro.Data.Caching.FileCache"/>
            <seealso cref="P:Nemiro.Data.Caching.FileCache.BufferAccessTimeout"/>
            <seealso cref="P:Nemiro.Data.Caching.FileCache.BufferSize"/>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheInfo.BufferAccessTimeout">
            <summary>
            Waiting time gain access to the buffer of file cache (<see cref="F:Nemiro.Data.CachingType.File"/>). 
            </summary>
            <value>Default value is <see cref="F:System.TimeSpan.Zero"/>.</value>
            <remarks>
            <para>Minimal <c>100</c> milliseconds.</para>
            <para>At the time of waiting, the current thread can be blocked for <c>100</c> milliseconds.</para>
            </remarks>
            <seealso cref="P:Nemiro.Data.Caching.CacheInfo.BufferSize"/>
            <seealso cref="T:Nemiro.Data.Caching.FileCache"/>
            <seealso cref="P:Nemiro.Data.Caching.FileCache.BufferAccessTimeout"/>
            <seealso cref="P:Nemiro.Data.Caching.FileCache.BufferSize"/>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheInfo.AccessTimeout">
            <summary>
            Waiting time gain access to the entry of file cache (<see cref="F:Nemiro.Data.CachingType.File"/>).
            After this time, if the file entry are not available, an exception is thrown.
            </summary>
            <value>Defualt value is <see cref="F:System.TimeSpan.Zero"/>.</value>
            <remarks>
            <para>Minimal <c>100</c> milliseconds.</para>
            <para>At the time of waiting, the current thread can be blocked for <c>100</c> milliseconds.</para>
            </remarks>
            <seealso cref="T:Nemiro.Data.Caching.FileCache"/>
            <seealso cref="P:Nemiro.Data.Caching.FileCache.AccessTimeout"/>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheInfo.Binder">
             <summary>
             Type serializer of custom objects.
             </summary>
             <remarks>
             <para>Only for <see cref="P:Nemiro.Data.Sql.SqlClient.CacheType"/> = <see cref="F:Nemiro.Data.CachingType.File"/>.</para>
             </remarks>
             <example>
             <para>The following example shows sample code class <see cref="T:Nemiro.Data.Caching.CacheBinder"/>.</para>
             <para>You can copy it and use in owner projects.</para>
             <code lang="C#">
             using System.Reflection;
             
             public sealed class MyCacheBinder : System.Runtime.Serialization.SerializationBinder
             {
            
               public override Type BindToType(string assemblyName, string typeName)
               {
                 return Type.GetType(String.Format("{0}, {1}", typeName, Assembly.GetExecutingAssembly().FullName));
               }
               
             }
             </code>
             <code lang="VB">
             Imports System.Reflection
             
             Public NotInheritable Class MyCacheBinder 
               Inherits System.Runtime.Serialization.SerializationBinder
            
               Public Overloads Overrides Function BindToType(assemblyName As String, typeName As String) As Type
                 Return Type.GetType(String.Format("{0}, {1}", typeName, Assembly.GetExecutingAssembly().FullName))
               End Function
               
             End Class
             </code>
             </example>
             <seealso cref="T:Nemiro.Data.Caching.FileCache"/>
             <seealso cref="T:Nemiro.Data.Caching.CacheBinder"/>
        </member>
        <member name="T:Nemiro.Data.DataChangeInfo">
            <summary>
            Provides information about changes to the data.
            </summary>
        </member>
        <member name="M:Nemiro.Data.DataChangeInfo.#ctor(System.String,System.String,System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.DataChangeInfo"/> class.
            </summary>
            <param name="previousValue">Previous value.</param>
            <param name="currentValue">Current value.</param>
            <param name="columnName">Column name.</param>
            <param name="propertyName">Property name.</param>
            <param name="displayName">Display name.</param>
        </member>
        <member name="P:Nemiro.Data.DataChangeInfo.PreviousValue">
            <summary>
            Previous value.
            </summary>
        </member>
        <member name="P:Nemiro.Data.DataChangeInfo.CurrentValue">
            <summary>
            Current value.
            </summary>
        </member>
        <member name="P:Nemiro.Data.DataChangeInfo.PropertyName">
            <summary>
            Property name.
            </summary>
        </member>
        <member name="P:Nemiro.Data.DataChangeInfo.ColumnName">
            <summary>
            Field name.
            </summary>
        </member>
        <member name="P:Nemiro.Data.DataChangeInfo.DisplayName">
            <summary>
            Display name.
            </summary>
        </member>
        <member name="T:Nemiro.Data.ColumnAttribute">
            <summary>
            Attribute indicates that the property implements a table field.
            </summary>
        </member>
        <member name="M:Nemiro.Data.ColumnAttribute.#ctor(System.String,System.Data.SqlDbType)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.ColumnAttribute"/> class with specifying the field name and data type of SQL Server.
            </summary>
            <param name="columnName">Field name of the database table.</param>
            <param name="dataType">Field data type.</param>
        </member>
        <member name="M:Nemiro.Data.ColumnAttribute.#ctor(System.String,System.Data.SqlDbType,Nemiro.Data.ColumnAttributeFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.ColumnAttribute"/> class with specifying the field name, data type of SQL Server and flags.
            </summary>
            <param name="columnName">Field name of the database table.</param>
            <param name="dataType">Field data type.</param>
            <param name="flags">Field flags. Is bitmask of <see cref="T:Nemiro.Data.ColumnAttributeFlags"/>.</param>
        </member>
        <member name="M:Nemiro.Data.ColumnAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.ColumnAttribute"/> class with specifying the field name and data type.
            </summary>
        </member>
        <member name="M:Nemiro.Data.ColumnAttribute.#ctor(System.String,System.Object,Nemiro.Data.ColumnAttributeFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.ColumnAttribute"/> class with specifying the field name, data type and flags..
            </summary>
            <param name="columnName">Field name of the database table.</param>
            <param name="dataType">Field data type.</param>
            <param name="flags">Field flags. Is bitmask of <see cref="T:Nemiro.Data.ColumnAttributeFlags"/>.</param>
        </member>
        <member name="M:Nemiro.Data.ColumnAttribute.#ctor(System.String,System.Object,Nemiro.Data.ColumnAttributeFlags,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.ColumnAttribute"/> class.
            </summary>
            <param name="columnName">Field name of the database table.</param>
            <param name="dataType">Field data type.</param>
            <param name="flags">Field flags. Is bitmask of <see cref="T:Nemiro.Data.ColumnAttributeFlags"/>.</param>
            <param name="default">Default value.</param>
            <param name="size">Maximum field size (in bytes). Zero - no restrictions (default).</param>
        </member>
        <member name="M:Nemiro.Data.ColumnAttribute.GetSqlParameter">
            <summary>
            Returns the SQL Server parameter.
            </summary>
        </member>
        <member name="M:Nemiro.Data.ColumnAttribute.GetValidParameterValue(System.Reflection.PropertyInfo)">
            <summary>
			Returns valid parameter value.
            </summary>
        </member>
        <member name="M:Nemiro.Data.ColumnAttribute.GetSqlEmptyValue">
            <summary>
			Returns empty value.
            </summary>
        </member>
        <member name="M:Nemiro.Data.ColumnAttribute.SetOwner(System.Object)">
            <summary>
            Set parent class.
            </summary>
        </member>
        <member name="P:Nemiro.Data.ColumnAttribute.ColumnName">
            <summary>
            Name field of database table.
            </summary>
        </member>
        <member name="P:Nemiro.Data.ColumnAttribute.DataType">
            <summary>
            Data type field of database table. You can use <see cref="T:System.Data.SqlDbType"/>.
            </summary>
        </member>
        <member name="P:Nemiro.Data.ColumnAttribute.DisplayName">
            <summary>
            Display name.
            </summary>
        </member>
        <member name="P:Nemiro.Data.ColumnAttribute.Flags">
            <summary>
            Field flags. Is bitmask of <see cref="T:Nemiro.Data.ColumnAttributeFlags"/>.
            </summary>
        </member>
        <member name="P:Nemiro.Data.ColumnAttribute.Size">
            <summary>
            Maximum field size (in bytes). Zero - no restrictions (default).
            </summary>
        </member>
        <member name="P:Nemiro.Data.ColumnAttribute.Default">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="P:Nemiro.Data.ColumnAttribute.IsPrimaryKey">
            <summary>
            <see cref="P:Nemiro.Data.ColumnAttribute.Flags"/> contains <see cref="F:Nemiro.Data.ColumnAttributeFlags.PrimaryKey"/> or not.
            </summary>
        </member>
        <member name="P:Nemiro.Data.ColumnAttribute.IsUnique">
            <summary>
            <see cref="P:Nemiro.Data.ColumnAttribute.Flags"/> contains <see cref="F:Nemiro.Data.ColumnAttributeFlags.Unique"/> or not.
            </summary>
        </member>
        <member name="P:Nemiro.Data.ColumnAttribute.IsIdentity">
            <summary>
            <see cref="P:Nemiro.Data.ColumnAttribute.Flags"/> contains <see cref="F:Nemiro.Data.ColumnAttributeFlags.Identity"/> or not.
            </summary>
        </member>
        <member name="P:Nemiro.Data.ColumnAttribute.AllowNull">
            <summary>
            <see cref="P:Nemiro.Data.ColumnAttribute.Flags"/> contains <see cref="F:Nemiro.Data.ColumnAttributeFlags.AllowNull"/> or not.
            </summary>
        </member>
        <member name="P:Nemiro.Data.ColumnAttribute.ParameterName">
            <summary>
            Parameter name for database. For example: <c>@col_name</c>.
            </summary>
        </member>
        <member name="P:Nemiro.Data.ColumnAttribute.SqlDbType">
            <summary>
            SQL Server data type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nemiro.Data.ColumnAttribute.OwnerClassType">
            <summary>
            Type of parent class.
            </summary>
        </member>
        <member name="P:Nemiro.Data.ColumnAttribute.OwnerClass">
            <summary>
            Parent class instance.
            </summary>
        </member>
        <member name="P:Nemiro.Data.ColumnAttribute.IsSql">
            <summary>
            Is SQL server or not.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nemiro.Data.Caching.CacheEntryPolicy">
            <summary>
            Serizalized cache entry policy.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.CacheEntryPolicy.#ctor(System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Caching.CacheEntryPolicy"/> class.
            </summary>
            <param name="policy">Cache entry policy.</param>
        </member>
        <member name="M:Nemiro.Data.Caching.CacheEntryPolicy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Caching.CacheEntryPolicy"/> class.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheEntryPolicy.AbsoluteExpiration">
            <summary>
            The fixed date and time at which the cache entry will expire. 
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheEntryPolicy.SlidingExpiration">
            <summary>
            Gets or sets a value that indicates whether a cache entry should be evicted if it has not been accessed in a given span of time.
            </summary>
        </member>
        <member name="T:Nemiro.Data.DataHelper">
            <summary>
            Data helper class.
            </summary>
        </member>
        <member name="M:Nemiro.Data.DataHelper.ContainsColumn(System.Data.DataRow,System.String)">
            <summary>
            Returns true, if the row is a column with the specified name.
            </summary>
            <param name="row">The row in which you want to search column.</param>
            <param name="columnName">Column name.</param>
        </member>
        <member name="T:Nemiro.Data.TableNameNullException">
            <summary>
            An exception occurs if the attribute <see cref="T:Nemiro.Data.TableAttribute"/> is not specified table name (<see cref="P:Nemiro.Data.TableAttribute.TableName"/>).
            </summary>
        </member>
        <member name="M:Nemiro.Data.TableNameNullException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.TableNameNullException"/> class.
            </summary>
        </member>
        <member name="T:Nemiro.Data.Sql.SqlAdmin">
            <summary>
            Class provides access to the methods of database management SQL Server.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlAdmin.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Sql.SqlAdmin"/> class with default settings.
            </summary>    
        </member>
        <member name="M:Nemiro.Data.Sql.SqlAdmin.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Sql.SqlAdmin"/> class with connection string.
            </summary>
            <param name="connectionString">Connection string.
            For example: <c>user id=;password=;data source=(local);initial catalog=</c>
            Default value: <c>LocalSqlServer</c> (key name of the connection string in the.config file)
            </param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlAdmin.Dispose">
            <summary>
            Releases all resources used by the object.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlAdmin.GetSqlServerVersion">
            <summary>
            Returns the version of the instance SQL Server.
            </summary>
            <returns>For example: <c>11.0.3128.0</c>.</returns>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlAdmin.GetSqlServerProperty(Nemiro.Data.SqlServerProperties)">
            <summary>
            Returns the value of the specified property instance SQL Server.
            </summary>
            <param name="property">The property whose value you want to get.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlAdmin.GetSqlServerProprty(System.String)">
            <summary>
            Returns the value of the specified property instance SQL Server.
            </summary>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlAdmin.GetAllTablesName">
            <summary>
            Returns the names of all the tables that exist in the database.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlAdmin.GetAllTables">
            <summary>
            Returns a list of all the tables that are in the database.
            </summary>
            <returns>
            <para>Scheme of table results:</para>
            <code>
            TABLE_NAME;
            TABLE_SCHEMA;
            TABLE_CATALOG;
            TABLE_TYPE.
            </code>
            </returns>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlAdmin.GetAllTablesSize">
            <summary>
            Returns the size of the database tables.
            </summary>
            <returns>
            <para>Scheme of table results:</para>
            <code>
            table_name;
            rows;
            reserved;
            data_size;
            index_size;
            unused.
            </code>
            </returns>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlAdmin.TableIsExists(System.String)">
            <summary>
            Checks the existence of a specific table in the database.
            </summary>
            <param name="tableName">Name of the table, the presence of which should be checked.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlAdmin.TableIsExists(System.String,System.String)">
            <summary>
            Checks the existence of a specific table in the database.
            </summary>
            <param name="tableName">Name of the table, the presence of which should be checked.</param>
            <param name="tableSchema">Scheme.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlAdmin.GetTableColums(System.String)">
            <summary>
            Returns a list of all the columns of specified table.
            </summary>
            <param name="tableName">Table name.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlAdmin.GetTablePrimaryKey(System.String)">
            <summary>
            Returns a primary key of specified table.
            </summary>
            <param name="tableName">Table name.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlAdmin.ResetIdentity(System.String)">
            <summary>
            Reset value of autoincrement field.
            </summary>
            <param name="tableName">Table name.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlAdmin.SetIdentityValue(System.String,System.Int32)">
            <summary>
            Set new start value for autoincrement field.
            </summary>
            <param name="tableName">Table name.</param>
            <param name="value">New start value.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlAdmin.CreateTable(System.Data.DataTable,System.Boolean)">
            <summary>
            Creates a table in the database.
            </summary>
            <param name="value">Table for create in the database.</param>
            <param name="includeData">Include a set of data in a table or not. Default <c>False</c> - data will not be added.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlAdmin.CreateTable(System.Data.DataSet,System.Boolean)">
            <summary>
            Creates tables specified in the instance of <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="value">Data set that contains a list of tables to be created in the database.</param>
            <param name="includeData">Include a set of data in a tables or not. Default <c>False</c> - data will not be added.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlAdmin.DeleteTable(System.String)">
            <summary>
            Removes the specified table from the database.
            </summary>
            <param name="tableName">Name of the table you want to delete.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlAdmin.ClearTable(System.String)">
            <summary>
            Deletes all data from the specified table. Used <c>TRUNCATE TABLE</c>.
            </summary>
            <param name="tableName">Name of the table to be cleaned.</param>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlAdmin.ConnectionString">
            <summary>
            Connection string.
            Default value: <c>LocalSqlServer</c>.
            </summary>
            <value>Default value: <c>LocalSqlServer</c> (key name of the connection string in the.config file).</value>
        </member>
        <member name="T:Nemiro.Data.Sql.BaseObject">
            <summary>
            The base class that implements the object-oriented data access (Object-Relational Mapping, ORM).
            </summary>
            <remarks>
            <para>From this class must inherit all the objects through which it is necessary to interact with SQL Server database.</para>
            <para>
            ORM classes can be created manually or by using the program DB2Class3: 
            <see href="http://data.nemiro.net">http://data.nemiro.net</see>
            </para>
            <para>
            The default connection string is <c>LocalSqlServer</c>.
            </para>
            <code lang="XML">
            &lt;remove name="LocalSqlServer"/&gt;
            &lt;add 
              name="LocalSqlServer" 
              connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=example;Trusted_Connection=True;" 
            /&gt;
            </code>
            </remarks>
            <example>
            <para>The following example illustrates an embodiment in class <c>Users</c> table of the same name.</para>
            <code lang="C#">
            using System;
            using System.Collections.Generic;
            using Nemiro.Data;
            using Nemiro.Data.Sql;
            using System.Data;
            
            [Table("users")]
            public class Users : BaseObject
            {
            
              [Column("id_users", SqlDbType.Int, ColumnAttributeFlags.PrimaryKey | ColumnAttributeFlags.Identity)]
              public int IdUsers { get; set; }
            
              [Column("first_name", SqlDbType.NVarChar, Size = 50)]
              public string FirstName { get; set; }
            
              [Column("last_name", SqlDbType.NVarChar, Size = 50)]
              public string LastName { get; set; }
            
              [Column("email", SqlDbType.VarChar, Size = 100)]
              public string Email { get; set; }
            
              [Column("phone", SqlDbType.VarChar, Size = 30)]
              public string Phone { get; set; }
            
              [Column("sex", SqlDbType.Char, Size = 1)]
              public string Sex { get; set; }
            
              [Column("birthday", SqlDbType.DateTime, ColumnAttributeFlags.AllowNull)]
              public DateTime? Birthday { get; set; }
            
              [Column("date_created", SqlDbType.DateTime, Default = ColumnDefaultValues.Now)]
              public DateTime DateCreated { get; set; }
            
            }
            </code>
            <code lang="VB">
            Imports System.Collections.Generic
            Imports Nemiro.Data
            Imports Nemiro.Data.Sql
            Imports System.Data
            
            &lt;Table("users")&gt; _
            Public Class Users
              Inherits BaseObject
              
              &lt;Column("id_users", SqlDbType.Int, ColumnAttributeFlags.PrimaryKey Or ColumnAttributeFlags.Identity)&gt; _
              Public Property IdUsers() As Integer
            
              &lt;Column("first_name", SqlDbType.NVarChar, Size := 50)&gt; _
              Public Property FirstName() As String
            
              &lt;Column("last_name", SqlDbType.NVarChar, Size := 50)&gt; _
              Public Property LastName() As String
            
              &lt;Column("email", SqlDbType.VarChar, Size := 100)&gt; _
              Public Property Email() As String
            
              &lt;Column("phone", SqlDbType.VarChar, Size := 30)&gt; _
              Public Property Phone() As String
            
              &lt;Column("sex", SqlDbType.[Char], Size := 1)&gt; _
              Public Property Sex() As String
            
              &lt;Column("birthday", SqlDbType.DateTime, ColumnAttributeFlags.AllowNull)&gt; _
              Public Property Birthday() As System.Nullable(Of DateTime)
            
              &lt;Column("date_created", SqlDbType.DateTime, [Default] := ColumnDefaultValues.Now)&gt; _
              Public Property DateCreated() As DateTime
            
            End Class
            </code>
            <para>Now that there is a class implementing access to the table <c>users</c>, you can work with the data through this object.</para>
            <para>If the table <c>users</c> in the database does not exist, it can be easy to create, as shown in the following example.</para>
            <code lang="C#">
            // create instance of Users class
            Users u = new Users();
            // check the existence of a table in the database
            if (!u.TableExists())
            {
              // table not found, 
			        // create table
              u.CreateTable();
            }
            </code>
            <code lang="VB">
            ' create instance of Users class
            Dim u As New Users()
            ' check the existence of a table in the database
            If Not u.TableExists() Then
              ' table not found, 
			        ' create table
              u.CreateTable()
            End If
            </code>
            <para>
            Constantly check the existence of tables in the database is not recommended.
            You can do this once, when you install or run the application.
            </para>
            <para>
            Work directly with the data provided by three simple methods: <see cref="M:Nemiro.Data.Sql.BaseObject.Load"/>, <see cref="M:Nemiro.Data.Sql.BaseObject.Save"/> and <see cref="M:Nemiro.Data.Sql.BaseObject.Delete"/>.
            </para>
            <para>
            The following example shows how add  two new users to the <c>users</c> table.
            Data is added after calling <see cref="M:Nemiro.Data.Sql.BaseObject.Save"/>.
            </para>
            <code lang="C#">
            // create instance of Users class
            Users u = new Users();
            // specify the user data
            u.FirstName = "John";
            u.LastName = "Smith";
            u.Sex = "M";
            u.Email = "j.smith@example.org";
            u.Birthday = new DateTime(1980, 1, 1);
            // save user to database
            u.Save();
            
            // output
            Console.WriteLine("User ID: {0}", u.IdUsers);
            
            // create instance of Users class
            u = new Users();
            // specify the user data
            u.FirstName = "Anna";
            u.LastName = "Smith";
            u.Sex = "F";
            u.Email = "a.smith@example.org";
            u.Birthday = new DateTime(1985, 10, 15);
            // save user to database
            u.Save();
            
            // output
            Console.WriteLine("User ID: {0}", u.IdUsers);
            </code>
            <code lang="VB">
            ' create instance of Users class
            Dim u As New Users()
            ' specify the user data
            u.FirstName = "John"
            u.LastName = "Smith"
            u.Sex = "M"
            u.Email = "j.smith@example.org"
            u.Birthday = new DateTime(1980, 1, 1)
            ' save user to database
            u.Save()
            
            ' output
            Console.WriteLine("User ID: {0}", u.IdUsers)
            
            ' create instance of Users class
            u = New Users()
            ' specify the user data
            u.FirstName = "Anna"
            u.LastName = "Smith"
            u.Sex = "F"
            u.Email = "a.smith@example.org"
            u.Birthday = new DateTime(1985, 10, 15)
            ' save user to database
            u.Save()
            
            ' output
            Console.WriteLine("User ID: {0}", u.IdUsers)
            </code>
            <para>Each record in the database has a unique identifier. 
            In this example, the primary key is <c>id_users</c> field of table <c>users</c>.
			In the <c>Users</c> class to indicate that the attributes <see cref="F:Nemiro.Data.ColumnAttributeFlags.PrimaryKey"/> and
            <see cref="F:Nemiro.Data.ColumnAttributeFlags.Identity"/>.
            </para>
            <code lang="C#">
            // create instance of Users class
            Users u = new Users();
            // specifies the user identifier
            u.IdUsers = 1;
            // loading data of user to class instance 
            u.Load();
            
            // output
            Console.WriteLine("Name:\t\t {0} {1}", u.FirstName, u.LastName);
            Console.WriteLine("Gender:\t\t {0}", u.Sex);
            Console.WriteLine("Birthday:\t {0}", u.Birthday.Value.ToShortDateString());
            Console.WriteLine("Email:\t\t {0}", u.Email);
            </code>
            <code lang="VB">
            ' create instance of Users class
            Dim u As New Users()
            ' specifies the user identifier
            u.IdUsers = 1
            ' loading data of user to class instance 
            u.Load()
            
            ' output
            Console.WriteLine("Name:\t\t {0} {1}", u.FirstName, u.LastName)
            Console.WriteLine("Gender:\t\t {0}", u.Sex)
            Console.WriteLine("Birthday:\t {0}", u.Birthday.Value.ToShortDateString())
            Console.WriteLine("Email:\t\t {0}", u.Email)
            </code>
            <para>
            If the specified identifier, calling <see cref="M:Nemiro.Data.Sql.BaseObject.Save"/> will not create a new record, 
            and save the changes to an existing record.
            </para>
            <code lang="C#">
            // create instance of Users class
            Users u = new Users();
            // specifies the user identifier
            u.IdUsers = 1;
            // loading data of user to class instance 
            u.Load();
            // the data is loaded or not
            if (u.IdUsers &lt;= 0)
            {
              // ID is null, then the data in the database is not found
              Console.WriteLine("User not found...");
              return;
            }
            // user data successfully loaded
            // output
            Console.WriteLine("User ID: {0}", u.IdUsers);
            // change user data
            u.FirstName = "Max";
            u.LastName = "Robinzon";
            // save
            u.Save();
            // output user id
            Console.WriteLine("User ID: {0}", u.IdUsers);
            </code>
            <code lang="VB">
            ' create instance of Users class
            Dim u As New Users()
            ' specifies the user identifier
            u.IdUsers = 1
            ' loading data of user to class instance 
            u.Load()
            ' the data is loaded or not
            If u.IdUsers &lt;= 0 Then
              ' ID is null, then the data in the database is not found
              Console.WriteLine("User not found...")
              Return
            End If
            ' user data successfully loaded
            ' output
            Console.WriteLine("User ID: {0}", u.IdUsers)
            ' change user data
            u.FirstName = "Max"
            u.LastName = "Robinzon"
            ' save
            u.Save()
            ' output user id
            Console.WriteLine("User ID: {0}", u.IdUsers)
            </code>
            <para>Base class <see cref="T:Nemiro.Data.Sql.BaseObject"/> has overloads that allow you to further simplify data access.</para>
            <para>Use the <see href="http://data.nemiro.net">DB2Class3</see>, 
            for automatically create a more comfortable classes for data access.</para>
            </example>
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.#ctor">
            <summary>
            Called from constructors in derived classes in order to initialize the <see cref="T:Nemiro.Data.Sql.BaseObject"/> class.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.#ctor(System.Data.DataRow)">
            <summary>
            Called from constructors in derived classes in order to initialize the <see cref="T:Nemiro.Data.Sql.BaseObject"/> class.
            </summary>
            <param name="row">Data row on which will be built instance of the derived class.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.#ctor(System.Object)">
            <summary>
            Called from constructors in derived classes in order to initialize the <see cref="T:Nemiro.Data.Sql.BaseObject"/> class.
            </summary>
            <param name="primaryKeyValue">Identifier that should load the data into an instance of the derived class.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.#ctor(System.Object,System.Int32)">
            <summary>
            Called from constructors in derived classes in order to initialize the <see cref="T:Nemiro.Data.Sql.BaseObject"/> class.
            </summary>
            <param name="cacheDuration">Duration caching the query results (in seconds). Minus one or zero - without caching (default).</param>
            <param name="primaryKeyValue">Identifier that should load the data into an instance of the derived class.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.#ctor(System.Object,Nemiro.Data.Caching.CacheInfo)">
            <summary>
            Called from constructors in derived classes in order to initialize the <see cref="T:Nemiro.Data.Sql.BaseObject"/> class.
            </summary>
            <param name="cache">Caching options.</param>
            <param name="primaryKeyValue">Identifier that should load the data into an instance of the derived class.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.#ctor(System.Data.DataRow,System.Object,System.Int32,Nemiro.Data.Caching.CacheInfo)">
            <summary>
            Called from constructors in derived classes in order to initialize the <see cref="T:Nemiro.Data.Sql.BaseObject"/> class.
            </summary>
            <param name="cacheDuration">Duration caching the query results (in seconds). Minus one or zero - without caching (default).</param>
            <param name="row">Data row on which will be built instance of the derived class.</param>
            <param name="primaryKeyValue">Identifier that should load the data into an instance of the derived class.</param>
            <param name="cache">Caching options.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.Load">
            <summary>
			Loads to instance of the derived class data by primary key field or unique fields.
            </summary>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.Load(System.Data.DataRow)">
            <summary>
            Loads to instance of the derived class data from <see cref="T:System.Data.DataRow"/> instance.
            </summary>
            <param name="row">Data row on which will be built instance of the derived class.</param>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.Save">
            <summary>
            Saves data of derived class instance to the database.
            </summary>
            <remarks>
            <para>
            Caching is not used.
            </para>
            </remarks>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.Delete">
            <summary>
            Removes an instance of the derived data from the database. 
            </summary>
            <returns>Returns the number of deleted data.</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.CreateTable">
            <summary>
            Creates a database table based on the scheme described in the instance of the derived class.
            </summary>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.TableExists">
            <summary>
            Checks an existence the table in the database, described in the instance of the derived class.
            </summary>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.Exists">
            <summary>
            Checks the existence of data in the table of database.
            </summary>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.GetChanges(System.StringComparison)">
            <summary>
            Returns information about the data changes.
            </summary>
            <param name="stringComparisonType">Type of string comparison.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.ToXml">
            <summary>
            Serializes an instance of the derived class to XML.
            </summary>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.LoadXml(System.String)"/>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.ToJson"/>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.LoadJson(System.String)"/>
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.ToXml(System.Text.Encoding)">
            <summary>
            Serializes an instance of the derived class to XML with specified encoding.
            </summary>
            <param name="encoding">Encoding that will be used during serialization.</param>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.LoadXml(System.String)"/>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.ToJson"/>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.LoadJson(System.String)"/>
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.ToXml(System.Text.Encoding,System.Xml.Formatting)">
            <summary>
            Serializes an instance of the derived class to XML with specified encoding and formatting options.
            </summary>
            <param name="encoding">Encoding that will be used during serialization.</param>
            <param name="formatting">Formatting options.</param>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.LoadXml(System.String)"/>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.ToJson"/>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.LoadJson(System.String)"/>
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.LoadXml(System.String)">
            <summary>
            Loads data from the XML-document to instance of the derived class.
            </summary>
            <param name="xml">Xml-data.</param>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.ToXml"/>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.ToJson"/>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.LoadJson(System.String)"/>
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.LoadXml(System.String,System.Text.Encoding)">
            <summary>
            Loads data from the XML-document to instance of the derived class with specified encoding.
            </summary>
            <param name="xml">Xml-data.</param>
            <param name="encoding">Encoding.</param>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.ToXml"/>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.ToJson"/>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.LoadJson(System.String)"/>
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.ToJson">
            <summary>
            Serializes the instance of the derived class to JSON.
            </summary>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.LoadJson(System.String)"/>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.ToXml"/>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.LoadXml(System.String)"/>
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.LoadJson(System.String)">
            <summary>
            Loads data from JSON to instance of the derived class.
            </summary>
            <param name="json">JSON data.</param>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.ToJson"/>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.ToXml"/>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.LoadXml(System.String)"/>
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.ToString">
            <summary>
            Returns an instance of the derived class as a string in the format JSON.
            </summary>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.ToJson"/>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.LoadJson(System.String)"/>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.ToXml"/>
            <seealso cref="M:Nemiro.Data.Sql.BaseObject.LoadXml(System.String)"/>
        </member>
        <member name="M:Nemiro.Data.Sql.BaseObject.GetList(System.Type,System.Int32,System.Int32,System.String[],System.Object,System.String)">
            <summary>
            Returns a collection of instances of the derived class.
            </summary>
            <param name="T">The entity type.</param>
            <param name="page">Page (from 1).</param>
            <param name="recordsPerPage">Number of records per page. Zero - all records.</param>
            <param name="includeFields">List of fields you want to include in a query result. By default, all fields.</param>
            <param name="sort">The sort order of the records.</param>
            <param name="filter">Filter. When specifying a filter is added to the query design <c>WHERE</c> indicating the contents <paramref name="filter"/> as is.</param>
            <returns>
            Returns a collection of instances of the derived class.
            </returns>
            <exception cref="T:System.Data.SqlClient.SqlException">The exception that is thrown when SQL Server returns a warning or error.</exception> 
        </member>
        <member name="P:Nemiro.Data.Sql.BaseObject.ConnectionString">
            <summary>
            Connection string.
            Default value: <c>LocalSqlServer</c>.
            </summary>
            <value>Default value: <c>LocalSqlServer</c> (key name of the connection string in the.config file).</value>
        </member>
        <member name="P:Nemiro.Data.Sql.BaseObject.RowData">
            <summary>
           DataRow on which builded an instance of the derived class.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Sql.BaseObject.TableName">
            <summary>
            Table name.
            </summary>
            <seealso cref="T:Nemiro.Data.TableAttribute"/>
        </member>
        <member name="P:Nemiro.Data.Sql.BaseObject.CacheDuration">
            <summary>
            Duration caching the query results (in seconds). Minus one or zero - without caching (default).
            </summary>
            <seealso cref="P:Nemiro.Data.Sql.BaseObject.Cache"/>
        </member>
        <member name="P:Nemiro.Data.Sql.BaseObject.Cache">
            <summary>
            Cache options.
            </summary>
            <seealso cref="P:Nemiro.Data.Sql.BaseObject.CacheDuration"/>
        </member>
        <member name="T:Nemiro.Data.CachingType">
            <summary>
            Enumeration methods of caching query results to a database.
            </summary>
        </member>
        <member name="F:Nemiro.Data.CachingType.None">
            <summary>
            Without cache.
            </summary>
        </member>
        <member name="F:Nemiro.Data.CachingType.Auto">
            <summary>
            Auto (deafult).
            </summary>
        </member>
        <member name="F:Nemiro.Data.CachingType.Web">
            <summary>
            Web cache, only for ASP .NET.
            </summary>
        </member>
        <member name="F:Nemiro.Data.CachingType.File">
            <summary>
            File cache.
            </summary>
        </member>
        <member name="F:Nemiro.Data.CachingType.Memory">
            <summary>
            Memory cache (not recommended for ASP .NET).
            </summary>
        </member>
        <member name="F:Nemiro.Data.CachingType.Custom">
            <summary>
            Custom cache.
            </summary>
        </member>
        <member name="T:Nemiro.Data.ConnectionMode">
            <summary>
            Mode connect to the database.
            </summary>
        </member>
        <member name="F:Nemiro.Data.ConnectionMode.Auto">
            <summary>
            Automatically open and close the database connection (recommended). Is default.
            </summary>
        </member>
        <member name="F:Nemiro.Data.ConnectionMode.Manual">
            <summary>
            Manually close the connection to the database.
            </summary>
        </member>
        <member name="T:Nemiro.Data.SqlServerProperties">
            <summary>
            List of properties of the instance SQL Server.
            </summary>
        </member>
        <member name="T:Nemiro.Data.SqlServerEditionIDs">
            <summary>
            List of editorial SQL Server.
            </summary>
        </member>
        <member name="F:Nemiro.Data.SqlServerEditionIDs.Enterprise">
            <summary>
            Enterprise Edition
            </summary>
        </member>
        <member name="F:Nemiro.Data.SqlServerEditionIDs.EnterpriseEdition">
            <summary>
            Enterprise Edition
            </summary>
        </member>
        <member name="F:Nemiro.Data.SqlServerEditionIDs.EnterpriseEvaluation">
            <summary>
            Enterprise Evaluation
            </summary>
        </member>
        <member name="F:Nemiro.Data.SqlServerEditionIDs.BusinessIntelligence">
            <summary>
            Business Intelligence
            </summary>
        </member>
        <member name="F:Nemiro.Data.SqlServerEditionIDs.Developer">
            <summary>
            Developer Edition
            </summary>
        </member>
        <member name="F:Nemiro.Data.SqlServerEditionIDs.Express">
            <summary>
            Express Edition
            </summary>
        </member>
        <member name="F:Nemiro.Data.SqlServerEditionIDs.ExpressWithAdvancedServices">
            <summary>
            Express Edition with Advanced Services
            </summary>
        </member>
        <member name="F:Nemiro.Data.SqlServerEditionIDs.Standard">
            <summary>
            Standard Edition
            </summary>
        </member>
        <member name="F:Nemiro.Data.SqlServerEditionIDs.Web">
            <summary>
            Web Edition
            </summary>
        </member>
        <member name="T:Nemiro.Data.SqlServerEngineEditionList">
            <summary>
            List of editions SQL Server.
            </summary>
        </member>
        <member name="F:Nemiro.Data.SqlServerEngineEditionList.PersonalOrDesktopEngine">
            <summary>
            Personal or Desktop Engine (is not available for SQL Server 2005 and later versions).
            </summary>
        </member>
        <member name="F:Nemiro.Data.SqlServerEngineEditionList.Standard">
            <summary>
            Standard (returned for Standard, Web and Business Intelligence).
            </summary>
        </member>
        <member name="F:Nemiro.Data.SqlServerEngineEditionList.Enterprise">
            <summary>
            Enterprise (it is returned for Evaluation Edition, Developer Edition and Enterprise Edition both options).
            </summary>
        </member>
        <member name="F:Nemiro.Data.SqlServerEngineEditionList.Express">
            <summary>
            Express (returned for Express, Express with tools and Express with Advanced Services).
            </summary>
        </member>
        <member name="F:Nemiro.Data.SqlServerEngineEditionList.SQLAzure">
            <summary>
            SQL Azure
            </summary>
        </member>
        <member name="T:Nemiro.Data.TypeCommand">
            <summary>
            List of commands types.
            </summary>
        </member>
        <member name="F:Nemiro.Data.TypeCommand.Auto">
            <summary>
            Automatic detection (default).
            </summary>
        </member>
        <member name="F:Nemiro.Data.TypeCommand.StoredProcedure">
            <summary>
            Name of the stored procedure.
            </summary>
        </member>
        <member name="F:Nemiro.Data.TypeCommand.TableDirect">
            <summary>
            Table name.
            </summary>
        </member>
        <member name="F:Nemiro.Data.TypeCommand.Text">
            <summary>
            T-SQL query.
            </summary>
        </member>
        <member name="T:Nemiro.Data.ColumnAttributeFlags">
            <summary>
            List of flags that determine the interpretation properties when used in working with the data source.
            </summary>
        </member>
        <member name="F:Nemiro.Data.ColumnAttributeFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Nemiro.Data.ColumnAttributeFlags.PrimaryKey">
            <summary>
            Primary Key.
            </summary>
        </member>
        <member name="F:Nemiro.Data.ColumnAttributeFlags.Identity">
            <summary>
            The counter is used in conjunction with <see cref="F:Nemiro.Data.ColumnAttributeFlags.PrimaryKey"/>.
            </summary>
        </member>
        <member name="F:Nemiro.Data.ColumnAttributeFlags.AllowNull">
            <summary>
            Allow <c>NULL</c> value.
            </summary>
        </member>
        <member name="F:Nemiro.Data.ColumnAttributeFlags.Unique">
            <summary>
            Unique field value.
            </summary>
        </member>
        <member name="T:Nemiro.Data.ColumnDefaultValues">
            <summary>
            List of dynamic values.
            </summary>
        </member>
        <member name="F:Nemiro.Data.ColumnDefaultValues.Now">
            <summary>
            Current date and time.
            </summary>
        </member>
        <member name="F:Nemiro.Data.ColumnDefaultValues.NewId">
            <summary>
            New <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="F:Nemiro.Data.ColumnDefaultValues.Empty">
            <summary>
            Empty value.
            </summary>
        </member>
        <member name="T:Nemiro.Data.OrderBy">
            <summary>
            List sorting options.
            </summary>
        </member>
        <member name="F:Nemiro.Data.OrderBy.ASC">
            <summary>
            Ascending.
            </summary>
        </member>
        <member name="F:Nemiro.Data.OrderBy.DESC">
            <summary>
            Descending.
            </summary>
        </member>
        <member name="T:Nemiro.Data.Caching.CacheCollection">
            <summary>
            A collection of cache management.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.CacheCollection.GetObjectCache(System.Type,System.Object[])">
            <summary>
            Gets or adds caching object and returns the specified type.
            </summary>
            <param name="t">Type of object cache.</param>
            <param name="args">More options will be passed to the constructor to initialize class cache.</param>
        </member>
        <member name="T:Nemiro.Data.Caching.WebCache">
            <summary>
            Standard ASP .NET cache.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.WebCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Caching.WebCache"/> class.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.WebCache.#ctor(System.Web.HttpContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Caching.WebCache"/> class with link to instance <see cref="T:System.Web.HttpContext"/>.
            </summary>
            <param name="context">Instance of current <see cref="T:System.Web.HttpContext"/>.</param>
        </member>
        <member name="M:Nemiro.Data.Caching.WebCache.AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>
			      Adds a cache entry into the cache.
            </summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="value">The object to insert.</param>
            <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
            <param name="regionName">A named region in the cache to which a cache entry can be added.</param>
            <returns>If a matching cache entry already exists, a cache entry; otherwise, null (Nothing).</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.WebCache.AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
			      Adds a cache entry into the cache using the specified <see cref="T:System.Runtime.Caching.CacheItem"/> instance and details about how to evict the entry.
            </summary>
            <param name="value">The data for the cache entry.</param>
            <param name="policy">An object that contains eviction details for the cache entry.</param>
            <returns>If a matching cache entry already exists, a cache entry; otherwise, null (Nothing).</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.WebCache.AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)">
            <summary>
            Adds a cache entry into the cache using the specified key and a value and an absolute expiration value.  
            </summary>
            <param name="key">A unique identifier for the cache entry to add or get.</param>
            <param name="value">The data for the cache entry.</param>
            <param name="absoluteExpiration">The fixed date and time at which the cache entry will expire.</param>
            <param name="regionName">A named region in the cache to which a cache entry can be added. </param>
            <returns>If a matching cache entry already exists, a cache entry; otherwise, null (Nothing).</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.WebCache.Contains(System.String,System.String)">
            <summary>
            Determines whether a cache entry exists in the cache.
            </summary>
            <param name="key">A unique identifier for the cache entry to add or get.</param>
            <param name="regionName">A named region in the cache to which a cache entry was added.</param>
            <returns><c>True</c> if the cache contains a cache entry whose key matches key; otherwise, <c>False</c>.</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.WebCache.CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
			      Creates a <see cref="T:System.Runtime.Caching.CacheEntryChangeMonitor"/> object that can trigger events in response to changes to specified cache entries.
            </summary>
            <param name="keys">An enumeration of unique cache entry keys.</param>
            <param name="regionName">A named region in the cache to which a cache entry can be added.</param>
            <remarks>Not supported.</remarks>
        </member>
        <member name="M:Nemiro.Data.Caching.WebCache.Get(System.String,System.String)">
            <summary>
            Returns an entry from the cache.
            </summary>
            <param name="key">A unique identifier for the cache entry to get.</param>
            <param name="regionName">A named region in the cache to which a cache entry was added.</param>
            <returns>A reference to the cache entry that is identified by <paramref name="key"/>, if the entry exists; otherwise, <c>null</c> (<c>Nothing</c>).</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.WebCache.GetCacheItem(System.String,System.String)">
            <summary>
            Returns the specified entry from the cache as a <see cref="T:System.Runtime.Caching.CacheItem"/> instance.
            </summary>
            <param name="key">A unique identifier for the cache entry to get.</param>
            <param name="regionName">A named region in the cache to which a cache entry was added.</param>
            <returns>A reference to the cache entry that is identified by <paramref name="key"/>, if the entry exists; otherwise, <c>null</c> (<c>Nothing</c>).</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.WebCache.GetCount(System.String)">
            <summary>
            Returns the total number of cache entries in the cache.
            </summary>
            <param name="regionName">A named region in the cache to which a cache entry was added. </param>
            <returns>The number of entries in the cache.</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.WebCache.GetEnumerator">
            <summary>
            Creates an enumerator that can be used to iterate through a collection of cache entries.
            </summary>
            <returns>The enumerator object that provides access to the items in the cache.</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.WebCache.GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Returns a set of cache entries that correspond to the specified keys.
            </summary>
            <param name="keys">A set of unique identifiers for the cache entries to return.</param>
            <param name="regionName">A named region in the cache to which a cache entry was added.</param>
            <returns>A set of cache entries that correspond to the specified keys.</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.WebCache.Remove(System.String,System.String)">
            <summary>
            Removes a cache entry from the cache.
            </summary>
            <param name="key">A unique identifier for the cache entry to remove.</param>
            <param name="regionName">A named region in the cache to which a cache entry was added.</param>
            <returns>If the entry is found in the cache, the removed cache entry; otherwise, <c>null</c> (<c>Nothing</c>).</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.WebCache.Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>
			Inserts a cache entry into the cache by using a <see cref="T:System.Runtime.Caching.CacheItem"/> instance to supply the key and value for the cache entry.
            </summary>
            <param name="key">A unique identifier for the cache entry to add or get.</param>
            <param name="regionName">A named region in the cache to which a cache entry was added.</param>
            <param name="policy">An object that contains eviction details for the cache entry.</param>
            <param name="value">The data for the cache entry.</param>
        </member>
        <member name="M:Nemiro.Data.Caching.WebCache.Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Inserts a cache entry into the cache by using a <see cref="T:System.Runtime.Caching.CacheItem"/> instance to supply the key and value for the cache entry.
            </summary>
            <param name="item">The data for the cache entry.</param>
            <param name="policy">An object that contains eviction details for the cache entry.</param>
        </member>
        <member name="M:Nemiro.Data.Caching.WebCache.Set(System.String,System.Object,System.DateTimeOffset,System.String)">
            <summary>
           Inserts a cache entry into the cache by using a key and a value and specifies time-based expiration details. 
            </summary>
            <param name="key">A unique identifier for the cache entry to add or get.</param>
            <param name="regionName">A named region in the cache to which a cache entry was added.</param>
            <param name="value">The data for the cache entry.</param>
            <param name="absoluteExpiration">The fixed date and time at which the cache entry will expire.</param>
        </member>
        <member name="P:Nemiro.Data.Caching.WebCache.DefaultPolicy">
            <summary>
            Default cache policy.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.WebCache.DefaultCacheCapabilities">
            <summary>
            Gets a description of the features that the cache provides.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.WebCache.Name">
            <summary>
            Gets the name of the cache.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.WebCache.Item(System.String)">
            <summary>
            Gets or sets a value in the cache by using the default indexer property for an instance of the <see cref="F:WebCache"/> class..
            </summary>
            <param name="key">A unique identifier for the cache entry to add or get.</param>
        </member>
        <member name="T:Nemiro.Data.Caching.CacheBinder">
             <summary>
             Implements binding object serialization type.
             </summary>
             <example>
             <code lang="C#">
             using System.Reflection;
             
             public sealed class MyCacheBinder : System.Runtime.Serialization.SerializationBinder
             {
            
               public override Type BindToType(string assemblyName, string typeName)
               {
                 return Type.GetType(String.Format("{0}, {1}", typeName, Assembly.GetExecutingAssembly().FullName));
               }
               
             }
             </code>
             <code lang="VB">
             Imports System.Reflection
             
             Public NotInheritable Class MyCacheBinder 
               Inherits System.Runtime.Serialization.SerializationBinder
            
               Public Overloads Overrides Function BindToType(assemblyName As String, typeName As String) As Type
                 Return Type.GetType(String.Format("{0}, {1}", typeName, Assembly.GetExecutingAssembly().FullName))
               End Function
               
             End Class
             </code>
             </example>
        </member>
        <member name="M:Nemiro.Data.Caching.CacheBinder.BindToType(System.String,System.String)">
            <summary>
            Controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Assembly name of serialized object.</param>
            <param name="typeName">Type name of serialized object.</param>
        </member>
        <member name="T:Nemiro.Data.ValueForIdentityException">
            <summary>
            This exception occurs if the key property is no flag <see cref="F:Nemiro.Data.ColumnAttributeFlags.Identity"/> while the corresponding field in the table is a numeric counter.
            </summary>
        </member>
        <member name="M:Nemiro.Data.ValueForIdentityException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.ValueForIdentityException"/> class.
            </summary>
        </member>
        <member name="T:Nemiro.Data.Sql.SqlType">
            <summary>
            Helper class to work with SQL Server data types.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlType.ConvertToSqlDbType(System.Type,System.Version)">
            <summary>
            Converts the specified .NET type to SQL Server type.
            </summary>
            <param name="t">.NET type.</param>
            <param name="version">Version SQL Server.</param>
            <example>
            <code lang="C#">
            SqlDbType result = SqlType.ConvertToSqlDbType(typeof(long));
            Console.WriteLine("SQL Server type: {0}", result.ToString());
            </code>
            <code lang="VB">
            Dim result As SqlDbType = SqlType.ConvertToSqlDbType(GetType(Long))
            Console.WriteLine("SQL Server type: {0}", result.ToString())
            </code>
            </example>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlType.IsStringType(System.Data.SqlDbType)">
            <summary>
            SQL Server data type is string or not.
            </summary>
            <param name="t">SQL Server data type.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlType.IsNumericType(System.Data.SqlDbType)">
            <summary>
            SQL Server data type is numeric or not.
            </summary>
            <param name="t">SQL Server data type.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlType.IsDateType(System.Data.SqlDbType)">
            <summary>
            SQL Server data type is date/time or not.
            </summary>
            <param name="t">SQL Server data type.</param>
        </member>
        <member name="M:Nemiro.Data.Sql.SqlType.IsGuidType(System.Data.SqlDbType)">
            <summary>
            SQL Server data type is <see cref="T:System.Guid"/> or not.
            </summary>
            <param name="t">SQL Server data type.</param>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlType.StringTypeList">
            <summary>
            List of strings types.
            </summary>
            <remarks>
            <para>
            Contains:
            <list type="bullet">
            <item><description>SqlDbType.VarChar</description></item>
            <item><description>SqlDbType.NVarChar</description></item>
            <item><description>SqlDbType.Text</description></item>
            <item><description>SqlDbType.NText</description></item>
            <item><description>SqlDbType.Char</description></item>
            <item><description>SqlDbType.NChar</description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlType.NumericTypeList">
            <summary>
            List of numerics types.
            </summary>
            <remarks>
            <para>
            Contains:
            <list type="bullet">
            <item><description>SqlDbType.Int</description></item>
            <item><description>SqlDbType.BigInt</description></item>
            <item><description>SqlDbType.Float</description></item>
            <item><description>SqlDbType.Money</description></item>
            <item><description>SqlDbType.SmallInt</description></item>
            <item><description>SqlDbType.SmallMoney</description></item>
            <item><description>SqlDbType.TinyInt</description></item>
            <item><description>SqlDbType.Real</description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Nemiro.Data.Sql.SqlType.DateTypeList">
            <summary>
            List of date/time types.
            </summary>
            <remarks>
            <para>
            Contains:
            <list type="bullet">
            <item><description>SqlDbType.Date</description></item>
            <item><description>SqlDbType.DateTime</description></item>
            <item><description>SqlDbType.DateTime2</description></item>
            <item><description>SqlDbType.DateTimeOffset</description></item>
            <item><description>SqlDbType.SmallDateTime</description></item>
            <item><description>SqlDbType.Time</description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="T:Nemiro.Data.DataChangeInfoCollection">
            <summary>
            Collection of information about the data change.
            </summary>
        </member>
        <member name="M:Nemiro.Data.DataChangeInfoCollection.Add(System.String,System.String,System.String,System.Object,System.Object)">
            <summary>
            Adds item to collection.
            </summary>
            <param name="previousValue">Previous value.</param>
            <param name="currentValue">Current value.</param>
            <param name="columnName">Field name.</param>
            <param name="propertyName">Property name.</param>
            <param name="displayName">Display name.</param>
        </member>
        <member name="T:Nemiro.Data.Caching.SerializableDataRow">
            <summary>
            Implements serializable <see cref="T:System.Data.DataRow"/>.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.SerializableDataRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Caching.SerializableDataRow"/> class.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.SerializableDataRow.#ctor(System.Data.DataRow)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Caching.SerializableDataRow"/> class.
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Nemiro.Data.Caching.SerializableDataRow.GetDataRow">
            <summary>
            Convert <see cref="T:Nemiro.Data.Caching.SerializableDataRow"/> to <see cref="T:System.Data.DataRow"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nemiro.Data.Caching.SerializableDataRow.ItemArray">
            <summary>
            Array of field values​​.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.SerializableDataRow.TableName">
            <summary>
            Table name.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.SerializableDataRow.Columns">
            <summary>
            Serializable collection of table columns.
            </summary>
        </member>
        <member name="T:Nemiro.Data.Caching.SerializableDataColumn">
            <summary>
            Implements serializable <see cref="T:System.Data.DataColumn"/>.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.SerializableDataColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Caching.SerializableDataColumn"/> class.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.SerializableDataColumn.#ctor(System.Data.DataColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.Caching.SerializableDataColumn"/> class.
            </summary>
            <param name="c">Initial data column.</param>
        </member>
        <member name="P:Nemiro.Data.Caching.SerializableDataColumn.ColumnName">
            <summary>
            Column name.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.SerializableDataColumn.DataType">
            <summary>
            Data type.
            </summary>
        </member>
        <member name="T:Nemiro.Data.Caching.CacheManager">
            <summary>
            Manager of objects caching and cache.
            </summary>
        </member>
        <member name="M:Nemiro.Data.Caching.CacheManager.GetObjectCache(System.Type,System.Object[])">
            <summary>
            Gets or adds caching object and returns the specified type.
            </summary>
            <param name="t">Type of object cache.</param>
            <param name="args">More options will be passed to the constructor of the class initialization cache.</param>
        </member>
        <member name="M:Nemiro.Data.Caching.CacheManager.GetFileCache(System.String)">
            <summary>
            Gets or adds and returns an object in the file system cache.
            </summary>
            <param name="cachePath">File cache storage path.</param>
        </member>
        <member name="M:Nemiro.Data.Caching.CacheManager.Add(System.Runtime.Caching.ObjectCache,System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>
            Adds an entry to the cache.
            </summary>
            <param name="cache">Object to access the cache.</param>
            <param name="key">A unique identifier for the cache entry to add.</param>
            <param name="value">The data for the cache entry.</param>
            <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
            <param name="regionName">A named region in the cache to which a cache entry can be added. </param>
            <returns>If a matching cache entry already exists, a cache entry; otherwise, null (Nothing).</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.CacheManager.Add(System.Runtime.Caching.ObjectCache,System.String,System.Object,System.DateTimeOffset,System.String)">
            <summary>
            Adds a cache entry into the cache using the specified key and a value and an absolute expiration value.  
            </summary>
            <param name="cache">Object to access the cache.</param>
            <param name="key">A unique identifier for the cache entry to add.</param>
            <param name="value">The data for the cache entry.</param>
            <param name="absoluteExpiration">The fixed date and time at which the cache entry will expire.</param>
            <param name="regionName">A named region in the cache to which a cache entry can be added. </param>
            <returns>If a matching cache entry already exists, a cache entry; otherwise, null (Nothing).</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.CacheManager.Get(System.Runtime.Caching.ObjectCache,System.String,System.String)">
            <summary>
            Returns an entry from the cache.
            </summary>
            <param name="cache">Object to access the cache.</param>
            <param name="key">A unique identifier for the cache entry to get.</param>
            <param name="regionName">A named region in the cache to which a cache entry was added.</param>
            <returns>A reference to the cache entry that is identified by <paramref name="key"/>, if the entry exists; otherwise, <c>null</c> (<c>Nothing</c>).</returns>
        </member>
        <member name="M:Nemiro.Data.Caching.CacheManager.Remove(System.Runtime.Caching.ObjectCache,System.String,System.String)">
            <summary>
            Removes a cache entry from the cache.
            </summary>
            <param name="cache">Object to access the cache.</param>
            <param name="key">A unique identifier for the cache entry to remove.</param>
            <param name="regionName">A named region in the cache to which a cache entry was added.</param>
            <returns>A reference to the cache entry that is identified by <paramref name="key"/>, if the entry exists; otherwise, <c>null</c> (<c>Nothing</c>).</returns>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheManager.Items">
            <summary>
            Collection caches of current application.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheManager.FileCache">
            <summary>
            File cache.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheManager.MemoryCache">
            <summary>
            Memory Cache.
            </summary>
        </member>
        <member name="P:Nemiro.Data.Caching.CacheManager.WebCache">
            <summary>
            ASP .NET cache.
            </summary>
        </member>
        <member name="T:Nemiro.Data.DataChangeLogger">
            <summary>
            The base class for log.
            </summary>
        </member>
        <member name="M:Nemiro.Data.DataChangeLogger.#ctor(System.Object,System.Data.DataRow,System.String[])">
            <summary>
            Initializes a new instance of the log class.
            </summary>
            <param name="owner">Owner class instance.</param>
            <param name="sourceRow">Source data row.</param>
            <param name="monitoringFields">List of fields (properties), which need to track changes.</param>
        </member>
        <member name="M:Nemiro.Data.DataChangeLogger.Commit">
            <summary>
            Commit log.
            </summary>
        </member>
        <member name="M:Nemiro.Data.DataChangeLogger.GetChanges">
            <summary>
            Get changes list.
            </summary>
        </member>
        <member name="P:Nemiro.Data.DataChangeLogger.Owner">
            <summary>
            Owner class instance.
            </summary>
        </member>
        <member name="P:Nemiro.Data.DataChangeLogger.SourceRow">
            <summary>
            Source data row.
            </summary>
        </member>
        <member name="P:Nemiro.Data.DataChangeLogger.MonitoringFields">
            <summary>
            List of fields (properties), which need to track changes.
            </summary>
        </member>
        <member name="T:Nemiro.Data.NoTableAttributeException">
            <summary>
            An exception occurs if a class that implements the database table attribute is missing <see cref="T:Nemiro.Data.TableAttribute"/>.
            </summary>
        </member>
        <member name="M:Nemiro.Data.NoTableAttributeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.NoTableAttributeException"/> class.
            </summary>
        </member>
        <member name="T:Nemiro.Data.MoreThanOnePrimaryKeyException">
            <summary>
            An exception occurs if in the class found more than one property with the flag <see cref="F:Nemiro.Data.ColumnAttributeFlags.PrimaryKey"/>.
            </summary>
        </member>
        <member name="M:Nemiro.Data.MoreThanOnePrimaryKeyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.Data.MoreThanOnePrimaryKeyException"/> class.
            </summary>
        </member>
    </members>
</doc>